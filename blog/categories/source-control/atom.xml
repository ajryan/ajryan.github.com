<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: source control | Aidan Ryan]]></title>
  <link href="http://www.aidanjryan.com/blog/categories/source-control/atom.xml" rel="self"/>
  <link href="http://www.aidanjryan.com/"/>
  <updated>2014-04-22T12:44:08-07:00</updated>
  <id>http://www.aidanjryan.com/</id>
  <author>
    <name><![CDATA[Aidan Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Better checkin comments]]></title>
    <link href="http://www.aidanjryan.com/blog/2012/09/20/better-checkin-comments/"/>
    <updated>2012-09-20T09:39:00-07:00</updated>
    <id>http://www.aidanjryan.com/blog/2012/09/20/better-checkin-comments</id>
    <content type="html"><![CDATA[<p>Good source control checkin (commit) comments can be a major time-saver. It's important to remember that your checkin comments have a large audience and a long lifetime.<!--more--></p>

<p>I rely on email alerts to get a quick overview of the work accomplished by our offshore team overnight. I want to get a feel for the volume of work accomplished and to identify any risky changes that should be reviewed right away. Quality comments make the difference between a glance through subject lines versus opening diffs to understand the nature of the changes.</p>

<p>The other activity greatly affected by comment quality is browsing source control history to locate the origin of a change. When I see a long list of "updated," "fixed," "changes," I know I'm in for an arduous hunt.</p>

<h2>Terrible comments:</h2>

<ul>
<li>Updated</li>
<li>Changed</li>
<li>Fixed</li>
<li>Updates</li>
<li>Checkin</li>
</ul>


<p>Terrible comments don't explain anything at all. Obviously you updated, changed, or fixed something. And you <em>really</em> obviously checked in!</p>

<h2>Bad comments:</h2>

<ul>
<li>Updated MyClass</li>
<li>Fixed Bug 5598</li>
<li>Changes to authentication</li>
</ul>


<p>Bad commenters tend to explain where or why they made changes, but not both. The "how" is usually completely missing.</p>

<h2>Good comments:</h2>

<ul>
<li>Bug 5598 - locking to fix race condition on settings initialization in MyClass</li>
<li>User Story 3355 - implement Save in Widget class</li>
</ul>


<p>Good comments have two to three components:</p>

<ol>
<li>Why - The reason the change was made, e.g. the Bug or Story number.</li>
<li>Where - The location of the change, usually a class or module name.</li>
<li>How - Required for Bug fixes. Explain the way the change solves the Bug.</li>
</ol>

]]></content>
  </entry>
  
</feed>
