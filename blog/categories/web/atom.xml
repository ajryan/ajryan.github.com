<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Aidan Ryan]]></title>
  <link href="http://www.aidanjryan.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://www.aidanjryan.com/"/>
  <updated>2014-04-17T18:02:32-07:00</updated>
  <id>http://www.aidanjryan.com/</id>
  <author>
    <name><![CDATA[Aidan Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microsoft Exam 70-480 Study Guide: Implement Program Flow]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/24/microsoft-exam-70-480-study-guide-implement-program-flow/"/>
    <updated>2013-01-24T15:43:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/24/microsoft-exam-70-480-study-guide-implement-program-flow</id>
    <content type="html"><![CDATA[<p>Let's pick up the 70-480 study guide with the second objective: Implement Program Flow.<!--more--></p>

<h2>Implement program flow</h2>

<p><blockquote><p>Iterate across collections and array items; manage program decisions by using switch statements, if/then, and operators; evaluate expressions.</p></blockquote></p>

<ul>
<li>Iterating a collection or array:</li>
</ul>


<p>```
for (item in collection) {</p>

<pre><code>console.log(item);
</code></pre>

<p>}</p>

<p>for (var i = 0; i &lt; collection.length; i++) {</p>

<pre><code>var item = collection[i];
console.log(item);
</code></pre>

<p>}</p>

<p>// NOT SUPPOTED IN IE
collection.forEach(item, index) {</p>

<pre><code>console.log(item + " at " + index);
</code></pre>

<p>}</p>

<p>$.each(collection, function(index, item) {</p>

<pre><code>console.log(item + " at " + index);
</code></pre>

<p>});
```</p>

<ul>
<li>Switch statement</li>
</ul>


<p>```
function(stringVar) {</p>

<pre><code>switch (stringVar) {
    case "one":
        console.log(1);
        break;
    case "two":
        console.log(2);
        break;
    default:
        console.log(999);
}
</code></pre>

<p>}
```
* If/then/else</p>

<p>```
if (condition) {</p>

<pre><code>// do a thing
</code></pre>

<p>}
else if (differentCondition) {</p>

<pre><code>// do another thing
</code></pre>

<p>}
else {</p>

<pre><code>// nothing at all
</code></pre>

<p>}
```</p>

<ul>
<li>JavaScript supports a similar set of comparison and assignment operators as other modern languages. Some special ones to watch for:</li>
</ul>


<p>```
var x = condition? "yes" : no;</p>

<p>function returnsUndefined {</p>

<pre><code>return void(5+5);
</code></pre>

<p>}</p>

<p>var y = (5, 6); // y = 6;</p>

<p>delete collection[4]; // collection[4] returns undefined</p>

<p>var x = new Date();
x instanceof Date; // true</p>

<p>typeof variable; // returns function, string, number, boolean, object, or undefined
```</p>

<ul>
<li>Evaluate expressions</li>
</ul>


<p><code>
eval("console.log('evaluated');");
</code></p>

<ul>
<li></li>
</ul>


<h2>Raise and handle an event</h2>

<p><blockquote><p>Handle common events exposed by DOM (OnBlur, OnFocus, OnClick); declare and handle bubbled events; handle an event by using an anonymous function</p></blockquote></p>

<ul>
<li>Handling events</li>
</ul>


<p>```
window.onload = (function(){</p>

<pre><code>alert('window load');
</code></pre>

<p>});</p>

<p>window.addEventListener('load', function(event) {</p>

<pre><code>alert('window load');
</code></pre>

<p>}, false);</p>

<p>var myButton = document.getElementById('button1');
myButton.addEventListener('click', function (event) {</p>

<pre><code>alert('clicked');
</code></pre>

<p>}, false);</p>

<p>$(window).on('click', 'div', function(event) {</p>

<pre><code>$(this).text = "changed text at " + new Date();
</code></pre>

<p>})</p>

<p>```</p>

<p>The third argument to addEventListener indicates whether you want to get the event in the <em>capture</em> stage. The capture stage begins at the HTML element and progresses through to the target, then the bubble stage flows from the target back to the HTML element. Using a combination of capture and <code>Event.stopPropagation</code> will allow you to grab an event before it reaches its actual target.</p>

<p>Event.preventDefault can be used to stop the default action from being invoked.</p>

<h2>Implement exception handling</h2>

<p><blockquote><p>Set and respond to error codes; throw an exception; request for null checks; implement try-catch-finally blocks</p></blockquote></p>

<p>To set an error:</p>

<p><code>throw new Error(100, "Yes sir");</code></p>

<p>Internet Explorer will treat the first argument as error number and second as description. Other browsers may support only a message.</p>

<p>You can get global errors</p>

<p>```
window.addEventListener('error', function(e) {</p>

<pre><code>console.log(e);
</code></pre>

<p>}, false);
```</p>

<p>Try/catch:</p>

<p>```
try {</p>

<pre><code>// do stuff
</code></pre>

<p>}
catch (e) {</p>

<pre><code>console.log(e.name);
console.log(e.number);
console.log(e.message);
console.log(e.description);

// can check (e instanceof TypeError) etc
</code></pre>

<p>}
finally {</p>

<pre><code>// all done
</code></pre>

<p>}</p>

<p>```</p>

<h2>Implement a callback</h2>

<p><blockquote><p>Receive messages from the HTML5 WebSocket API; use jQuery to make an AJAX call; wire up an event; implement a callback by using anonymous functions; handle the “this” pointer</p></blockquote></p>

<p>To receive messages from the WebSocket API, first create a new WebSocket object using the ws protocol. Attach event handlers</p>

<p>```
var socket = new WebSocket("ws://my-host.com"); // optional protocols param 2
socket.onopen = function (openEvent) {</p>

<pre><code>console.log('opened');
</code></pre>

<p>};
socket.onmessage = function (messageEvent) {</p>

<pre><code>console.log(messageEvent.data); // this can be Blob, String (included serialized JSON), or ArrayBuffer
</code></pre>

<p>};
// similar callbacks for onerror and onclose</p>

<p>// events will fire after something is sent
socket.send("let's get started");</p>

<p>// in some event handler:
socket.close();
```</p>

<p>Making an AJAX call with jQuery is done as follows:</p>

<p>```
$.ajax(</p>

<pre><code>'http://my-host.com/rest-endpoint',
{
    type: 'POST',
    data: {
        val1: 2,    // this will become a query string
        val2: 3     // for POST, should probably JSON.stringify
    },
    success: function (data) {
        // do something with it
    },
    error: function (e) { 
        // error
    }
});
</code></pre>

<p>```</p>

<p>The ajax method returns a Promise interface (jqXhr in this case), so the event handlers can also be hooked up as:</p>

<p>```</p>

<pre><code>$.ajax(...)
    .done(function(data){})
    .fail(function(error){});
</code></pre>

<p>```</p>

<p>The <code>this</code> pointer was addressed in other study guide posts.</p>

<h2>Create a web worker process</h2>

<p><blockquote><p>Start and stop a web worker; pass data to a web worker; configure timeouts and intervals on the web worker; register an event listener for the web worker; limitations of a web worker</p></blockquote></p>

<p>Here is a web worker sample:</p>

<p>```
// in the page HTML</p>

<p>var worker = new Worker('worker.js');
worker.onmessage = function(event) {</p>

<pre><code>console.log(event.data);
</code></pre>

<p>}
worker.postMessage('Hello.');</p>

<p>// and in the worker.js file</p>

<p>self.addEventListener('message', function(event) {</p>

<pre><code>self.postMessage('post back to the window's listener);
</code></pre>

<p>}, false);
```</p>

<p>Other web worker notes:</p>

<ul>
<li>Event data can be an object and is sent a serialized copy - modifying the object in one context will not change it in the other</li>
<li>The <code>self</code> keyword is the global context in the worker js file</li>
<li>There is no DOM, window, or document in the worker script</li>
<li>The nav, location, XMLHttpRequest, and cache APIs can be accessed</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft Exam 70-480 study guide continued: Objective 1 remainder]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/23/microsoft-exam-70-480-study-guide-continued-objective-1-remainder/"/>
    <updated>2013-01-23T10:43:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/23/microsoft-exam-70-480-study-guide-continued-objective-1-remainder</id>
    <content type="html"><![CDATA[<p>Continuing the study guide for Microsoft Exam 70-480. My test date is coming up fast so I need to pick up the pace. I spent a long time on the new HTML5 features, because I have not delved into them in much detail on a project. Most of the remainder of this objective is familiar territory and will have cursory notes.<!--more--></p>

<h2>Implement and Manipulate Document Structures and Objects (24%)</h2>

<h3>Apply styling to HTML elements programmatically</h3>

<p>Much of this material was covered in my <a href="http://ajryan.github.com/blog/2013/01/22/microsoft-exam-70-480-study-guide-continued/">earlier study guide post</a>.</p>

<p>More specifically, after getting a node, you can <code>setAttribute('style', 'value')</code> or access the <code>.style</code> property directly and set specific CSS attributes on it. For example, <code>document.getElementById("container").style.color = "red"</code>. When applying hyphenated properties, drop hyphens as use lowerCamelCase (e.g. backgroundColor). Vendor-prefixed styles are accessed via <code>ms</code>, <code>Moz</code>, <code>O</code>, and <code>webkit</code> OR <code>Webkit</code> followed by the UpperCamelCase property.</p>

<p>With jQuery, it's a matter of using the <code>css</code> method to set a CSS property.</p>

<h4>Change the location of an element</h4>

<p>The same prior post gives information about moving an element within the DOM (insertBefore and *Child methods) or with jQuery (after/before/append/prepend).</p>

<p>Position can also be changed by modifying the CSS <code>position</code> and <code>top/right/bottom/left</code> properties (node.style.*).</p>

<h4>Apply a transform</h4>

<p>CSS3 transformations allow translation (lateral movement), rotation, scaling, and skew, in both 2D (broad support) and 3D (much less support). Due to the immaturity of browser support, vendor-specific CSS attributes are required. The relevant 2D transform function values are:</p>

<p><code>matrix, translate[|X|Y], scale[|X|Y], rotate, skew[|X|Y]</code></p>

<p>Transforms are defined in CSS with the <code>transform</code>, <code>transform-origin',</code>transform-style<code>,</code>perspective<code>,</code>perspective-origin<code>, and</code>backface-visibility` attributes.</p>

<p>Internet Explorer 10 supports 3D transforms:</p>

<p><code>matrix3d, translate3d, translateZ, scale3d, scaleZ, rotate[3d|X|Y</code></p>

<p>Other important considerations:</p>

<ul>
<li><p>Betas of IE10 required the <code>-ms-</code> prefix, but the current release does not.</p></li>
<li><p>Multiple functions can be chained together in a single transform attribute and are cumulative.</p></li>
<li><p>The box model and flow of a transformed element are calculated and applied <em>before</em> the transformation is applied - the element occupies its original position in the flow.</p></li>
<li><p>Transforms can be combined with transitions for interesting animations. The <code>transition</code> attribute should be applied to the element's original style. When a new style is applied, either programmatically or via JavaScript, the transition occurs. You can specify <code>all</code> or a particular CSS property to transition. The syntax is <code>transition: property duration timing-function delay, ...</code>. Browser prefixes should be used.</p></li>
<li><p>Remember this overall objective is about applying styling programmatically: in this case, the vendor-specific properties must be accessed, e.g. <code>div.style.WebkitTransformOrigin = "2px 5px"</code>.</p></li>
</ul>


<h4>Show and hide elements</h4>

<p>Elements can be shown and hidden via the <code>display: none</code> and <code>visibility: hidden</code> CSS properties. The primary difference is that <code>display</code> removes the element from the document flow while <code>visibility</code> makes the element invisible but keeps its space in the flow.</p>

<p>Via native API, use <code>.style.display</code> or <code>.style.visibility</code>. Via jQuery, the <code>.hide()</code> API can be used, which allows the setting of a duration and/or a more complex easing function. Under the covers, jQuery affects the <code>display</code> CSS attribute. When animating, the size of the object is gradually reduced to zero before display is set to none.</p>

<h3>Implement HTML5 APIs.</h3>

<h4>Storage APIs</h4>

<p>Cookies are traditionally used to associate values with a user and retrieve them at a later time, potentially across sessions. When the limitations of cookies are encountered, the storage API is useful.</p>

<ul>
<li>Cookies are limited by most browsers to 4KB and 300 max count within a domain.</li>
<li>They must be included in all HTTP requests and responses to the domain; they are stored locally in plain text</li>
<li>They are domain-wide and do not support multiple application sessions within a browser session.</li>
</ul>


<p>HTML5 Web Storage offers many improvements over cookies:</p>

<ul>
<li>Purely client side - the data does not need to round-trip, so there is no download time or bandwidth usage.</li>
<li>No 4KB limitation - IE provides around 10 MB of local and 10 MB of session storage.</li>
<li>Multi-session - if you use session storage, you can have two separate state storage areas within a single browser session.</li>
</ul>


<p>Working with the Storage API:</p>

<ul>
<li><p>Check for browser support by checking <code>'localStorage' in window &amp;&amp; window['localStorage'] !=== null</code> (similar for sessionStorage). In the following samples, sessionStorage can be substituted for localStorage.</p></li>
<li><p>The lifetime of localStorage is persistent across browser sessions; sessionStorage persists only as long as a page/tab is open.</p></li>
<li><p>The scope of localStorage is within the same linear domain hierarchy (e.g. domain.com, bob.domain.com, and alice.bob.domain.com can access one-another's localStorage, but john.domain.com cannot access bob.domain.com localStorage). The scope of sessionStorage is within the current page/tab.</p></li>
<li><p>There are three ways to store a key/value pair:</p></li>
</ul>


<p>```</p>

<pre><code>localStorage.myKey = 'myValue';
localStorage.setItem('myKey', 'myValue');
localStorage['myKey'] = 'myValue';
</code></pre>

<p>```</p>

<ul>
<li>To get the value of a key:</li>
</ul>


<p>```</p>

<pre><code>var value = localStorage.myKey;
value = localStorage['myKey'];
value = localStorage.getItem('myKey');
</code></pre>

<p>```</p>

<ul>
<li>To remove an item from storage:</li>
</ul>


<p>```</p>

<pre><code>localStorage.removeItem('myKey');
</code></pre>

<p>```</p>

<ul>
<li>To clear all items from storage:</li>
</ul>


<p>```</p>

<pre><code>localStorage.clear();
</code></pre>

<p>```</p>

<ul>
<li><p>Note that only string data may be stored as a value. Any non-string will be stored as a string using standard JavaScript conversion. If you want to preserve an object, <code>JSON.stringify</code> should be used to store and <code>JSON.parse</code> should be used to retrieve.</p></li>
<li><p>Supported in IE 8, Firefox 3.5, Chrome 4, Safari 4, Opera 10.5, iOS Safari 3.2, Android 2.1.</p></li>
</ul>


<h4>AppCache API</h4>

<p>The AppCache API allows the creation of offline web applications. Its primary functions are:</p>

<ul>
<li>Client-side cache of pages, images, scripts, style sheets, etc.</li>
<li>Accessing cached content via standard URIs</li>
</ul>


<p>In order to cache something you need to create a manifest. Following is a sample manifest:</p>

<p>```</p>

<pre><code>CACHE MANIFEST
# 2013-24-01:v3

CACHE:
# Defines resources to be cached after they are downloaded for the first time
script/app.js
css/styles.css
images/pic1.png

FALLBACK:
# Resources to use when online resources not available, in the form onlineURL cacheURL
# File-for-file
images/big_pic2.png images/pic2.png
# File-for-path
images/ images/offline.png
# File-for-wildcard
*.jpg offline.jpg

NETWORK:
# resources that will never be cached - user must be online
images/pic3.png
</code></pre>

<p>```</p>

<p>Manifest files must be served with the MIME type <code>text/cache-manifest</code>, have CACHE MANIFEST as the very first line, and be UTF-8 encoded.</p>

<p>The manifest is referenced in the <code>html</code> tag.</p>

<p><code>
&lt;html manifest="appcache.manifest"&gt;
...
&lt;/html&gt;
</code></p>

<p>Other AppCache notes:</p>

<ul>
<li><p>Any page that references a manifest is implicitly cached and does not need to be included in the manifest file itself.</p></li>
<li><p>There are three ways to trigger a client-side cache update:</p>

<ul>
<li><p>The cache automatically updated when the manifest file changes, so a version comment can be used to trigger an update.</p></li>
<li><p>The cache is updated programmatically with <code>applicationCache.update()</code> - this still requires that the manifest have changed from the last-downloaded version.</p></li>
<li><p>The user can manually clear the browser's cache of your site.</p></li>
</ul>
</li>
<li><p>Pages served over HTTPS can work offline.</p></li>
<li><p>The <code>window.applicationCache</code> object provides access to the cache. It has the following useful properties and events:</p>

<ul>
<li><code>status</code> field: Indicates the current cache status, returned as one of the following appCache members: <code>UNCACHED, IDLE, CHECKING, DOWNLOADING, UPDATEREADY, OBSOLETE</code>\</li>
<li><code>update</code> function: Trigger an async check of the manifest. Will throw an exception of the page is not cached.</li>
<li><code>swapCache</code> function: Swap currently ready cache update into the current storage. After swapping in the cache, the page must be reloaded to reflect the changes.</li>
<li><code>updateReady</code> event: fires when a cache update has been downloaded. In the handler, you can swap the cache and prompt the user to reload if they choose.</li>
<li><code>error</code> event: fires when the manifest cannot download, changes during its download, returns 404, manifest is OK but page itself fails to download.</li>
<li><code>progress</code> event: fires as each resource listed in the manifest is fetched</li>
<li>Several other events: <code>cached</code> (first cache of manifest), <code>checking</code> (manifest update check began), <code>downloading</code> (update was found and resources are being downloaded), <code>noupdate</code> (first manifest download done or checking done and manifest not changed), <code>obsolete</code> (manifest response is 404 or 410)</li>
</ul>
</li>
<li><p>Supported in IE 10, Firefox 16, Chrome 23, Safari 5.1, Opera 12.1, iOS Safari 3.2, Android 2.1.</p></li>
</ul>


<h4>Geolocation API</h4>

<p>The Geolocation API allows you to access geographical location information via JavaScript. It is exposed via the <code>window.navigator.geolocation</code> object.</p>

<p>The following <code>geolocation</code> members are useful:</p>

<ul>
<li><code>getCurrentPosition(successCallback, errorCallback, options)</code>: Async call to get the current position. The successCallback is called with a <code>Geoposition</code> object, or the errorCallback is called with an <code>error</code> object providing a code like <code>error.PERMISSION_DENIED</code>, <code>error.POSITION_UNAVAILABLE</code>, or <code>error.TIMEOUT</code>. The position object's <code>coords</code> member gives latitude, longitude, altitude, heading, speed, and accuracy (in meters) information.  Options can be provided for maximumAge (milliseconds) and enableHighAccuracy (can be affected by permissions).</li>
<li><code>watchPosition(...)</code>: has the same signature as getCurrentPosition but returns an integer of the <code>watchId</code> which can be used to cancel the watch activity. The successCallback will be called whenever the position changes.</li>
<li><code>clearWatch(watchId)</code>: stops watching position and will no longer call the callback for the watch set up with the <code>watchPosition</code> that returned <code>watchId</code>.</li>
</ul>


<h3>Establish the scope of objects and variables.</h3>

<h4>Define the lifetime of variables</h4>

<p>All JavaScript objects and variables have scope and lifetime. Some that are provided by the browser have global scope and infinite lifetime, like <code>document</code> and <code>window</code>; other variables have local scope and limited lifetimes.</p>

<p>More lifetime notes:</p>

<ul>
<li><p>Locally-scoped objects are created and destroyed each time their functions execute.</p></li>
<li><p>Globally-scoped objects live forever.</p></li>
<li><p>A function executed in an asynchronous context still has access to the variables from its scope, even if the function that defines its scope has finished executing. This is called a closure.</p></li>
</ul>


<h4>Keep objects out of the global namespace</h4>

<p>Techniques are available to keep variables and functions out of the global namespace:</p>

<ul>
<li>Always declare variables and functions (hereafter "objects") with the <code>var</code> keyword.</li>
<li>Always declare objects within the context of a function.</li>
<li>The above principal is expanded in what is generally referred to as the "module pattern". This refers to the use of an anonymous (key to avoid adding an identifier to the global namespace) Immediately-Invoked Function Expression (IIFE) to define a closure for the scope of the module. All of the following structures work to accomplish this goal.</li>
</ul>


<p>```
var x = 5;</p>

<p>(function(){</p>

<pre><code>var x = 10;
</code></pre>

<p>}());</p>

<p>(function(){</p>

<pre><code>var x = 20;
</code></pre>

<p>})();</p>

<p>(function($){</p>

<pre><code>$('#container').text('hi');
var x = 30;
</code></pre>

<p>}(jQuery)); // assumes jQuery script already included.</p>

<p>console.log(x); // "5"
```</p>

<h4>Use the “this” keyword to reference an object that fired an event</h4>

<p>The <code>this</code> keyword has some wrinkles in JavaScript. In the classic Object-Oriented model, <code>this</code> always refers to the current object instance. This is not so simple in JavaScript:</p>

<ul>
<li>In the global scope (outside any function) or when invoked within a globally-scoped function, <code>this</code> refers to the "global object", usually the same as <code>window</code>.</li>
<li>In the context of a method (function member of an object), <code>this</code> refers to the object.</li>
<li>In the context of a constructor, <code>this</code> refers to the function object being created.</li>
<li>In the context of an event handler attached via jQuery's <code>on</code>, <code>this</code> refers to the DOM object that triggered the event.</li>
<li><strong>Key for this objective</strong>: In the context of an event handler attached via <code>addEventListener</code>, <code>attachEvent</code> (IE) - <code>this</code> refers to the object that fired the event.</li>
</ul>


<h4>Scope variables locally and globally</h4>

<p>More scope notes:</p>

<ul>
<li><p>There are two scopes, global and local. Variables and functions with local scope are declared within a function and are accessible only within the body of that function (this includes nested functions); globally-scoped objects are declared outside a function and are accessible everywhere. There is no such thing as block scope.</p></li>
<li><p>JavaScript performs variable hoisting - this means that variables are treated as having been declared at the top of the function, regardless of the line where they are actually declared.</p></li>
<li><p>Special case: a variable named inside a function without the <code>var</code> keyword has global scope, but does not exist until that function is invoked.</p></li>
</ul>


<h3>Create and implement objects and methods</h3>

<h4>Implement native objects</h4>

<p>A native JavaScript object is created as follows:</p>

<p>```
var myObject = {</p>

<pre><code>stringMember: "xyz",
intMember: 1,
functionMember: function(thing) {
    console.log(thing);
}
</code></pre>

<p>};
```
You can also create a new Object instance and then add members to it:</p>

<p><code>
var myObject = new Object();
myObject.stringMember = "xyz";
</code></p>

<p>More complex objects can be implemented using function constructors. This allows more control over the accessibility of the members of the object.</p>

<p>```
var Person = function(firstName, lastName) {</p>

<pre><code>var _privateInt = 5;
var exports = {
    firstName: firstName,
    lastName: lastName
}
return exports;
</code></pre>

<p>};</p>

<p>var alice = new Person("alice", "jones");
```</p>

<p>Members of the object can then be accessed, e.g. <code>myObject.intMember = 2</code>.</p>

<h4>Create custom objects and custom properties for native objects using prototypes and functions</h4>

<p>There are several native objects, including:</p>

<p><code>Number, Boolean, String, Array, Date, Math, RegExp</code></p>

<p>A function can be added to an individual instance variable:</p>

<p><code>
var d = new Date();
d.logIt = function() { console.log(this); };
</code></p>

<p>A function can be added to the <strong>prototype</strong> of all objects created from the base function. These functions will be accessible on all objects created from that function, even those created before the function was added to the prototype.</p>

<p>```
var d = new Date();
if (!Date.prototype.logId) {</p>

<pre><code>Date.prototype.logIt = function() { console.log(this); };
</code></pre>

<p>}
```</p>

<h4>Inherit from an object</h4>

<p>Traditionally, inheritance has been accomplished as follows:</p>

<p>```
var Building = function(stories) {</p>

<pre><code>this.stories = stories;
return this;
</code></pre>

<p>};
Building.prototype.writeStories = function() {console.log(this.stories); };</p>

<p>var House = function(stories, squareFeet) {</p>

<pre><code>Building.call(this, stories);
this.squareFeet = squareFeet;
return this;
</code></pre>

<p>}
House.prototype = new Building();
House.prototype.constructor = House;
House.prototype.dump = function() { console.log(this.stories + " " + this.squareFeet);};</p>

<p>var h = new House(2, 2500);
h.dump();
```</p>

<p>Inheriting from an object can be accomplished in modern browsers via <code>Object.create(proto)</code>.</p>

<p>```
var Building = function(stories) {</p>

<pre><code>this.stories = stories;
return this;
</code></pre>

<p>};
Building.prototype.writeStories = function() {console.log(this.stories); };</p>

<p>var House = function(stories, squareFeet) {</p>

<pre><code>Building.call(this, stories);
this.squareFeet = squareFeet;
return this;
</code></pre>

<p>}
House.prototype = Object.create(Building.prototype);
House.prototype.dump = function() { console.log(this.stories + " " + this.squareFeet);};</p>

<p>var h = new House(3, 3300);
h.dump();</p>

<p>```</p>

<h1>Fin.</h1>

<p>This concludes the first of the four objectives - "Implement and Manipulate Document Structures and Objects"</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft Exam 70-480 study guide continued: Media and Graphics]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/23/microsoft-exam-70-480-study-guide-continued-media-and-graphics/"/>
    <updated>2013-01-23T10:43:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/23/microsoft-exam-70-480-study-guide-continued-media-and-graphics</id>
    <content type="html"><![CDATA[<p>Continuing the study guide for Microsoft Exam 70-480, we are addressing the media and graphics goals within the <strong>Write code that interacts with UI controls</strong> objective.<!--more--></p>

<h2>Implement and Manipulate Document Structures and Objects (24%)</h2>

<h3>Write code that interacts with UI controls</h3>

<h4>Implement media controls</h4>

<p>HTML5 has two new tags, <code>video</code> and <code>audio</code>, which allow direct embedding of these sources. Prior to HTML5, this was accomplished via the <code>embed</code> and <code>object</code> tags, and relied on plugins for playing the source. Modern browsers provide native implementations for playing audio and video, in support of the new tags.</p>

<h5>Tag attributes</h5>

<p>The <code>audio</code> and <code>video</code> tags supports the following custom attributes:</p>

<ul>
<li><code>src</code>: URL for the source file</li>
<li><code>autoplay</code>: boolean - should the file play immediately?</li>
<li><code>loop</code>: boolean - should the file loop upon completion?</li>
<li><code>controls</code>: boolean - should the browser show its own controls?</li>
<li><code>preload</code>: value can be <code>none</code>, <code>metadata</code>, or <code>auto</code>. Indicates whether none of the file, only its metadata, or a browser-determined amount of the file should be pre-loaded before beginning playback.</li>
</ul>


<p>The <code>video</code> tag supports the additional attribute:</p>

<ul>
<li><code>poster</code>: URL for an image to display while the video is loading</li>
</ul>


<p>Note that in HTML5 boolean attributes can be included without a value (<code>&lt;audio src='file.mp3' controls /&gt;</code>), or self-value (, as )<code>&lt;audio src='file.mp3' controls="controls"/&gt;</code>).</p>

<p>Earlier HTML5 drafts had an <code>autobuffer</code> atrribute that is superseded by <code>preload</code>. Both attribute can be used while browsers transition.</p>

<p>These are block content tags, and so they support all of the attributes common to block content.</p>

<h5>Source formats</h5>

<p>Different browsers support different file formats, and there is no single format supported by all major browsers.</p>

<ul>
<li><p>For audio, WAV garners the most support, with only Chrome excluded. Firefox, Chrome, and Opera support Ogg; Safari, Chrome, and IE support MP3; Firefox, Safari, Opera, and IE support WAV.</p></li>
<li><p>For video, webm has been agreed upon as the standard format for video, with some caveats. Safari does not currently support webm, and Internet Explorer will play webm video <em>if</em> the codec is installed separately. Within the type attribute, the codecs can be specified, video and then audio, e.g. <code>&lt;source src="movie.webm" type='video/webm; codecs="vp8, vorbis"'/&gt;</code>. Note the double quotes embedded within single quotes. The other major video types are mp4 and ogv
.
Because there is not a single source format supported by all major browsers, <code>source</code> elements can be nested inside the <code>audio</code> and <code>video</code> elements to provide multiple sources. The order of the sources is important: certain versions of Firefox had issues if the MP3 source was included first, so it's recommended to provide an OGG source followed by an MP3 source to cover all browsers. For video, mp4 should be included first to avoid an iOS Safari issue.</p></li>
</ul>


<p>MIME type should be specified on the source tags - this allows the browser to pre-determine which file to download.</p>

<h5>Examples</h5>

<p>Given the above information, here is an HTML5 <code>audio</code> control with all possible attributes set:</p>

<p>```</p>

<pre><code>&lt;audio controls autoplay loop preload="auto" autobuffer&gt;
    &lt;source src="file.ogg" type="audio/ogg"&gt;
    &lt;source src="file.mp3" type="audio/mp3"&gt;
    &lt;p&gt;We could supply a Flash fallback or &lt;a href=""&gt;link to the file for download&lt;/a&gt; here.&lt;/p&gt;
&lt;/audio&gt;
</code></pre>

<p>```</p>

<p>And video:</p>

<p>```</p>

<pre><code>&lt;video controls autoplay loop preload="auto" autobuffer&gt;
    &lt;source src="movie.webm" type='video/webm; codecs="vp8, vorbis"' /&gt;
    &lt;source src="movie.ogv" type='video/ogg; codecs="theora, vorbis"' /&gt;
    &lt;p&gt;We could supply a Flash fallback or &lt;a href=""&gt;link to the file for download&lt;/a&gt; here.&lt;/p&gt;
&lt;/audio&gt;
</code></pre>

<p>```</p>

<h5>Browser compatibility</h5>

<p>Create an <code>audio</code> or <code>video</code> element and check for the existence of the <code>canPlayType</code> function on it to determine if the HTML5 audio tag is implemented in the current browser. The <code>canPlayType</code> function can then be used to check what file types are supported: empty string, "maybe", or "probably" will be returned. When the tag is not supported, or the browser does not support your available sources, you can fall back to Flash.</p>

<p>Currently only IE10 and Chrome support the <code>&lt;track&gt;</code> element within a media control. The purpose of tracks is to add parallel timed features such as navigation points, subtitles, or alternate audio streams.</p>

<h5>Methods and Properties</h5>

<p>If the <code>controls</code> attribute is not set, custom controls can be implemented by accessing the following methods and properties. You may wish to implement your own controls to achieve a more consistent appearance across browsers.</p>

<p>Important properties:</p>

<p><code>error, src, readyState, seeking, currentTime, duration, paused, playbackRate, played, seekable, ended, autoplay, loop, volume, muted</code></p>

<p>Important methods:</p>

<p><code>canPlayType, load, play, pause</code></p>

<h5>Events</h5>

<p>The media controls provide the following commonly-used events:</p>

<ul>
<li><code>canplay</code>: Fires when the control determines whether it can play the video source.</li>
<li><code>playing</code>: Fires when playback is ready to start after having been paused or media not yet downloaded.</li>
<li><code>ended</code>: Fires when playback stops at the end of the file.</li>
<li><code>timeupdate</code>: Fires when the playback position changes during playback. Firefox fires once per frame, Webkit fires every 250ms.</li>
<li><code>play</code>: Fires when no longer paused, either after the play function is called or autoplay causes playback to begin.</li>
<li><code>pause</code>: Fires when paused after the pause function is called.</li>
<li><code>volumechange</code>: Fires after the volume or muted attribute value changes.</li>
</ul>


<p>Note that the playing and play events seem very similar: play will fire as soon as the play command is issued, and then the playing event will fire once playback actually begins.</p>

<h4>Implement HTML5 canvas and SVG graphics</h4>

<p>Both the Canvas and SVG APIs are available to developers for creating graphics. Both are vector graphics technologies but are better suited for different tasks. The primary difference is that SVG can be expressed in markup and styled with CSS, while Canvas drawing is performed through scripting. Another difference is that SVG is a "retained mode" model in which the graphic definition remains in memory and can be modified and re-rendered, while Canvas is an "immediate" or "fire and forget" model that renders directly to the screen when its API is called.</p>

<p>The choice of which technology to use comes down to several factors:</p>

<ul>
<li>Developer familiarity: graphics APIs - Canvas versus markup - SVG</li>
<li>Performance: size of screen has a large effect on Canvas, number of objects has a large effect on SVG</li>
<li>Fidelity: SVG is scalable and stays crisp at any magnification</li>
<li>High performance filtering: Canvas is better suited to pixel-based render, e.g. filters, ray tracers, pixel replacement/green screen</li>
<li>Real-time data: Canvas is much better suited for images that require rendering real-time changes in many small objects, e.g. weather animations</li>
</ul>


<h5>Canvas</h5>

<p>The <code>canvas</code> element enables rendering of resolution-independent graphics. A context is used for drawing, the most commonly implemented being Canvas 2D. Most browsers have implemented hardware-accelerated canvas rendering.</p>

<p>Canvas allows you to draw rectangles, lines, fills, arcs, shadows, Bezier curves, quadratic curves, images, and video.</p>

<p>Check for canvas support by creating a canvas element, verifying that it possesses the get <code>getContext</code> function, and that <code>getContext('2d')</code> is truthy. Canvas is supported on IE 7 / Firefox 3 / Safari 3 / Chrome 3 / Opera 10 / Android 1; basically, wide support on current browsers. Warning: IE 8 and below do not support the full API - the Explorercanvas library an be used in this case.</p>

<p>With a <code>canvas</code> element on the page, you can call its <code>getContext('2d')</code> method to get a Canvas 2D context and begin drawing.</p>

<p>The following are some interesting canvas APIs, assuming <code>ctx</code> is a Canvas 2D context:</p>

<ul>
<li><code>ctx.fillStyle = "style"</code>: sets the current fill style, may be a color, pattern, or gradient</li>
<li><code>ctx.strokeStyle = "style"</code>: similar to fillStyle, but for outlines.</li>
<li><code>ctx.drawImage(img, x, y)</code>: draw an HTML Image element into the context. Using an img on the page, it can be drawn during window.onLoad. For an Image created in JavaScript, the image.onLoad event should be used.</li>
<li><code>ctx.fillRect(x, y, width, height)</code>: draw the fill of a rectangle in the current fillStyle</li>
<li><code>ctx.strokeRect(x, y, width, height)</code>: draw the stroke of a rectangle in the current strokeStyle</li>
<li><code>ctx.clearRect(x, y, width, height)</code>: clears the target rectangle</li>
<li><code>ctx.beginPath()</code>: begins a new path for the next stroke</li>
<li><code>ctx.moveTo(x,y)</code>: moves the pen position without drawing</li>
<li><code>ctx.lineTo(x,y)</code>: defines a path with the pen from the current position</li>
<li><code>ctx.strokeStyle = "style"</code>: sets the stroke style</li>
<li><code>ctx.stroke()</code>: draws the current path with the current stroke style</li>
<li><code>ctx.font</code>, <code>ctx.textAlign</code>, and <code>ctx.textBaseline</code>: set the current text drawing properties</li>
<li><code>ctx.fillText("text", x, y)</code>: write text at the given position (x at left edge, y relative to textBasline).</li>
<li><code>var grad = ctx.createLinearGradient(x0, y0, x1, y1)</code>: create a linear gradient with the given angle</li>
<li><code>grad.addColorStop(position, "color")</code>: add a color stop to the gradient, at a position between 0.0 and 1.0.</li>
</ul>


<p>Canvas coordinates originate in the upper left, with the X axis horizontal.</p>

<p>You can listen to the <code>click</code> event, which provides cursor position, to interact with the canvas.</p>

<h5>SVG</h5>

<p>SVG graphics can be displayed by including an <code>&lt;svg&gt;</code> tag with SVG markup inside. SVG graphic elements can be styled with their own attributes, or with CSS. SVG elements can be modified via the DOM API, but CSS styling takes precedence for rendering. CSS pseudo-classes (like :hover) can be used to trigger style changes. SVG has its own CSS namespace with attributes like fill, stroke, stroke-width, stop-color, etc.</p>

<p>The <code>defs</code> tag within the SVG tag allows the definition of gradients and filters, which can be combined for interesting fill effects, blurs, and shadows.</p>

<p><strong>Example</strong></p>

<p>The following example illustrates the primary primitives and styles possible</p>

<p>```</p>

<pre><code>&lt;style type="text/css"&gt;
    svg.draw {
        width: 300px;
        height: 300px;
        border: #666 1px solid;
    }
    .black-stroke {
        stroke: black;
        stroke-width: 2;
    }
    .red-fill {
        fill: red;
    }
    .blue-fill {
        fill: blue;
    }
&lt;/style&gt;

&lt;svg class="draw" xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;defs&gt;
        &lt;radialGradient id="gradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%"&gt;
            &lt;stop offset="0%" style="stop-color:rgb(200,200,200); stop-opacity:0"/&gt;
            &lt;stop offset="100%" style="stop-color:rgb(0,0,255); stop-opacity:1"/&gt;
        &lt;/radialGradient&gt;
    &lt;/defs&gt;
    &lt;circle class="red-fill black-stroke" cx="50" cy="50" r="25" /&gt;
    &lt;rect class="blue-fill black-stroke" x="5" y="5" width="30" height="40"/&gt;
    &lt;line class="black-stroke" x1="0" y1="0" x2="200" y2="200" /&gt;
    &lt;ellipse cx="150" cy="150" rx="30" ry="50" fill="url(#gradient)" /&gt;
    &lt;polygon  points="20,10 300,20, 170,50" fill="green" /&gt;
    &lt;polyline points="0,0 0,20 20,20 20,40 40,40 40,60" fill="yellow" /&gt;
&lt;/svg&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft Exam 70-480 study guide continued: DOM manipulation]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/22/microsoft-exam-70-480-study-guide-continued/"/>
    <updated>2013-01-22T15:39:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/22/microsoft-exam-70-480-study-guide-continued</id>
    <content type="html"><![CDATA[<p>This is a continuation of my study guide for Microsoft Exam 70-480, working toward the Microsoft Certified Solutions Developer (MCSD): Web Applications certification. We are now tackling the <strong>Write code that interacts with UI controls</strong> objective, specifically DOM modification.<!--more--></p>

<h2>Implement and Manipulate Document Structures and Objects (24%)</h2>

<h3>Write code that interacts with UI controls</h3>

<h4>Programmatically add and modify HTML elements</h4>

<p>In general, the HTML DOM API or jQuery will be used to manipulate the page structure. It is important to understand the underlying native APIs - jQuery makes our code concise and cross-browser compatible, but a knowledge of what is happening under the covers will help you write more efficient jQuery. Moreover, there are times when you can accomplish something simple with the native API without the need to pull down jQuery.</p>

<p>In the following samples, I will give the native implementation, followed by its jQuery equivalent.</p>

<ul>
<li><p>The <code>document</code> object is a node that represents the entire HTML document (including the head). Everything in the DOM is a node. It's important to differentiate between nodes and elements: all elements are nodes, but not all nodes are elements. For example, a <code>div</code> element may have an <code>id</code> attribute - the attribute is a node, but not an element.</p></li>
<li><p>To get a single element by its ID:</p></li>
</ul>


<p>```</p>

<pre><code>document.getElementById('elementId') ==&gt; HTMLElement
$('#elementId') ==&gt; object ==&gt; jQuery object
</code></pre>

<p>```</p>

<ul>
<li>To get an array of elements by tag name:</li>
</ul>


<p>```</p>

<pre><code>document.getElementsByTagName('div') ==&gt; HTMLCollection / NodeList
$('div') ==&gt; jQuery[]
</code></pre>

<p>```</p>

<ul>
<li>To get an array of elements by name (most useful for inputs):</li>
</ul>


<p>```</p>

<pre><code>document.getElementsByName('myInput') ==&gt; HTMLCollection / NodeList
$('[name="myInput"]') ==&gt; jQuery[]
</code></pre>

<p>```</p>

<ul>
<li>To get an array of elements by CSS class:</li>
</ul>


<p>```</p>

<pre><code>document.getElementsByClassName('cool-class') ==&gt; HTMLCollection / NodeList
$('.cool-class') ==&gt; jQuery[]
</code></pre>

<p>```</p>

<ul>
<li>To traverse between nodes, once you have a node reference:</li>
</ul>


<p>```</p>

<pre><code>var domNode = document.getElementById('elementId');
// note parentElement can be used but not *all* nodes are elements
var domParent = domNode.parentNode;
// note that childNodes may include inter-tag text, children returns only elements
var domFirstChild = domNode.childNodes[0];
var domFirstElement = domNode.children[0];

var jqNode = $('#elementId');
var jqParent = jqNode.parent();
var jqFirstChild = jqNode.children()[0];
</code></pre>

<p>```</p>

<ul>
<li><p>Important properties of a DOM node:</p>

<ul>
<li><code>nodeType</code>: Integer (enum) representing the type of node. 1 = Element, 2 = Attribute, 3 = Text, 8 = Comment, 9 = Document</li>
<li><code>nodeName</code>: Name of the node. For tag elements, the tag name. For text content, #text.</li>
<li><code>nodeValue</code>: Value of the node. For elements, null. For text, the text itself, and for attributes, the attribute value.</li>
<li><code>childNodes</code>: Collection of children</li>
<li><code>parentNode</code>: Parent</li>
<li><code>firstChild</code>, <code>lastChild</code>, <code>nextSibling</code>, <code>previousSibling</code>: self-explanatory</li>
<li>jQuery equivalents:</li>
</ul>
</li>
</ul>


<p>```</p>

<pre><code>var element = $('#container');
var firstChild = element.children(':first');
var lastChild = element.children(':last');
var nextSibling = element.next();
var previousSibling = element.prev();
</code></pre>

<p>```</p>

<ul>
<li><p>Element nodes may have one or more attributes. To access them, the <code>attributes</code> member is used. Attributes are not considered children of a node.</p></li>
<li><p>Access all attributes of an element:</p></li>
</ul>


<p>```</p>

<pre><code>var div = document.getElementById('container');
var attribs = div.attributes;

// no jQuery equivalent
</code></pre>

<p>```</p>

<ul>
<li>Get and set the value of a particular attribute:</li>
</ul>


<p>```</p>

<pre><code>var div = document.getElementById('container');
var val = div.attributes['id'].value;
val = div.getAttribute('id');
var valNode = div.getAttributeNode('id');
div.attributes['id'].value = 'newValue';
div.setAttribute('id', 'newValue');

var jqDiv = $('#container');
var jqVal = jqDiv.attr('id');
jqdiv.attr('id', 'newValue');
</code></pre>

<p>```</p>

<ul>
<li>Check if an attribute exists:</li>
</ul>


<p>```</p>

<pre><code>var hasId = element.hasAttribute('id');
var jqHasId = (element.attr('id') !== undefined);
</code></pre>

<p>```</p>

<ul>
<li>Remove attribute:</li>
</ul>


<p>```</p>

<pre><code>element.removeAttribute('id');
element.removeAttributeNode(element.getAttributeNode('id'));

jqElement.removeAttr('id');
</code></pre>

<p>```</p>

<p>Now we have covered accessing and inspecting page elements via the DOM API and jQuery - it's time to delve into modifying the structure of the page: adding, removing, and changing the contents of elements.</p>

<ul>
<li><p>Once you have a node reference, you can change its value. Tag nodes do not usually have values, but their first child will usually be a text node with value equal to the text content.</p></li>
<li><p>To change a tag's inner text:</p></li>
</ul>


<p>```</p>

<pre><code>var par = document.getElementById('paragraph1');
par.firstChild.nodeValue = 'Changed text';

var jqPar = $('#paragraph1');
jqPar.text('Changed text');
</code></pre>

<p>```</p>

<ul>
<li>To add an element to the DOM tree, you need to create an element, set any required attributes, and then append it to as the last child of an existing node:</li>
</ul>


<p>```</p>

<pre><code>var newNode = document.createElement('img');
newNode.setAttribute('src', 'https://www.google.com/images/srpr/logo3w.png');
var body = document.getElementsByTagName('body')[0];
body.appendChild(newNode);

$('body').append('&lt;img src="https://www.google.com/images/srpr/logo3w.png"/&gt;');
</code></pre>

<p>```</p>

<ul>
<li>Adding additional inner text to a span, div, or p tag is accomplished as follows. Note that jQuery <code>append</code> is equally effective for HTML or text:</li>
</ul>


<p>```</p>

<pre><code>var par = document.getElementById('paragraph1');
par.appendChild(document.createTextNode('Additional paragraph text here'));

$('#paragraph1').append('Additional paragraph text here')
</code></pre>

<p>```</p>

<ul>
<li><p>You can also insert an element as a sibling before an existing node:
```
  var newNode = document.createElement('img');
  newNode.setAttribute('src', 'https://www.google.com/images/srpr/logo3w.png');
  var body = document.getElementsByTagName('body')[0];
  body.insertBefore(newNode, document.getElementById('container'));</p>

<p>  $('container').before('<img src="https://www.google.com/images/srpr/logo3w.png"/>');
  $('body').prepend('img src="https://www.google.com/images/srpr/logo3w.png"/');
```</p></li>
<li><p>Take care to note the differences between <code>appendChild</code> and <code>insertBefore</code>. A node added with <code>appendChild</code> will be the last node contained by the target. Calling <code>insertBefore</code> has the signature container.insertBefore(nodeToInsert, nodeThatWillBeAfter) - in this case as well, nodeToInsert will be a child of the target, but it will be the prior sibling to nodeThatWillBeAfter.</p></li>
<li><p>To remove an element from the DOM:</p></li>
</ul>


<p>```</p>

<pre><code>var body = document.getElementsByTagName('body')[0];
var removedElement = body.removeChild(document.getElementById('container'));

$('#container').remove();
</code></pre>

<p>```</p>

<ul>
<li>To replace an existing element:</li>
</ul>


<p>```</p>

<pre><code>var body = document.getElementsByTagName('body')[0];
var newNode = document.createElement('img');
newNode.setAttribute('src', 'https://www.google.com/images/srpr/logo3w.png');
var oldNode = document.getElementById('container');
body.replaceChild(oldNode, newNode);

$('#container').replaceWith('&lt;img src="https://www.google.com/images/srpr/logo3w.png"/&gt;');
</code></pre>

<p>```</p>

<ul>
<li><p>In both the DOM and jQuery, you can move an element by getting a reference to it and then calling one of the above insertion/replacement methods. A node cannot exist at two places in the DOM, so it will automatically be removed from its previous location.</p></li>
<li><p>jQuery in total provides <code>after</code>, <code>before</code>, <code>append</code>, <code>prepend</code>, <code>replaceWith</code>, <code>wrap</code>, <code>wrapInner</code>, and <code>wrapAll</code> for DOM manipulation - these methods are called on the selector for the existing element(s) with the new content as an argument. Companion methods <code>insertAfter</code>, <code>insertBefore</code>, <code>appendTo</code>, <code>prependTo</code>, and <code>replaceAll</code> are targeted to the new content with the target selector as an argument. The odd man out is <code>remove</code>, which is targeted to a selector for content to be removed.</p></li>
</ul>


<h2>'Til Next Time</h2>

<p>That will conclude DOM manipulation. We'll pick up next time with media, canvas, and SVG.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft Exam 70-480: Programming in HTML5 with JavaScript and CSS3]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/18/microsoft-exam-70-480-programming-in-html5-with-javascript-and-css3/"/>
    <updated>2013-01-18T09:11:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/18/microsoft-exam-70-480-programming-in-html5-with-javascript-and-css3</id>
    <content type="html"><![CDATA[<p>I am planning to earn the Microsoft Certified Solutions Developer (MCSD): Web Applications certification. The first exam on this track is 70-480: Programming in HTML5 with JavaScript and CSS3. My study notes follow.<!--more--></p>

<h2>Implement and Manipulate Document Structures and Objects (24%)</h2>

<h3>Create the document structure</h3>

<h4>Structure the UI using semantic markup, including for search engines and screen readers</h4>

<ul>
<li><p>HTML5 introduces several new tags, and does not support some others that were deprecated in HTML 4.0.1.</p></li>
<li><p>The new tags are:</p></li>
</ul>


<p><code>article, aside, audio,
bdi,
canvas, command,
datalist, details,
embed,
figure, figcaption, footer, header, hgroup,
keygen, mark, meter, nav, output, progress,
rp, rt, ruby,
section, source, summary,
time, track,
video,
wbr</code></p>

<ul>
<li><p>In total there are 30 new tags.</p></li>
<li><p>The following 12 tags are no longer supported in HTML5. Most of these were deprecated in HTML 4.0.1, with the exception of acronym, big, frame, frameset, noframes, and tt.</p></li>
</ul>


<p><code>acroynm, applet, basefont, big, center, dir, font, frame, frameset, noframes, strike, tt</code></p>

<ul>
<li><p>The objectives make special mention of the new semantic tags for structure.</p>

<ul>
<li><p><code>section</code> (block): Grouping of content. Typically will include a heading. W3C: "A generic section of a document. A thematic grouping of content, typically with a heading." Sections usually will appear inside articles, but can be used independently.</p></li>
<li><p><code>article</code> (block): Individual/independent block of content, such as a blog post or news article. Articles should be able to stand alone, whereas sections may be part of a larger whole. Usually contain sections. May be sub-articles (e.g. comments on blog entry). Should be independently re-distributable, e.g. in syndication.</p></li>
<li><p><code>nav</code> (block): Navigational feature, usually site-level. Section of a page that links to other pages or parts within the page - a section with navigation links. W3C: "Not all groups of links need to be in a nav - intended for sections that consist of <em>major</em> navigation blocks. Common for footers to have list of links to policies etc, nav is not appropriate here."</p></li>
<li><p><code>header</code>: Will contain heading content, often will contain nav. Usually site/page-level header. Will include introductory and/or navigational aids. Usually will contain sections H? / HGROUP. Can wrap TOC, search form, logos, etc.</p></li>
<li><p>footer (block): Will contain foot-note content, like attributions, copyright, etc. Typically site/page-level footer.</p></li>
<li>aside (block): Content tangentially related to primary content.</li>
</ul>
</li>
<li><p>Some of the new semantic structuring tags have the property of being "sectioning content,"" or being a "sectioning root." This means that the HTML outlining engine will give these nodes special treatment. Sectioning content defines the scope of headings and footers - within an <code>article, aside, nav, section</code> tag, headers are nested within the outline of their parents, regardless of header level. So, <code>&lt;body&gt;&lt;h2&gt;Top&lt;/h2&gt;&lt;section&gt;&lt;h1&gt;Inner&lt;/h1&gt;&lt;/section&gt;&lt;/body&gt;</code> results in the H1 being outlined within the H2.</p></li>
<li><p>Other new semantic tags not directly related to structure:</p>

<ul>
<li><p><code>figure</code> (block) / <code>figcaption</code> (text): The figure tag provides stand-alone, illustrative content, like a plot, image, or video; its first child figcaption tag provides a related caption.</p></li>
<li><p><code>hgroup</code> (block): A group of headings. Should contain &lt;h[1-6]> tags only. Provides a hint to the HTML outlining engine that only the first header in the group should be included in the outline, and that the following headings within the group are not additional outline-able sections but are instead subheadings of the first.</p></li>
<li><p><code>mark</code> (text): Highlighted text, or text referred to elsewhere.</p></li>
<li><p><code>time</code> (text): A date and/or time representation.</p></li>
</ul>
</li>
<li><p>The key to remember about the new "semantic" tags is that they allow one to express the meaning of a block in the tag itself, rather than via a CSS class or ID. This brings some standardization to naming (should I call it my class "article" or "feature"?), and promotes block roles to more prominence than other CSS attributes. They also aid in accessibility; for example, users of screen readers can indicate the order in which NAV sections should be read.</p></li>
<li><p>It is important to frame the overall context for structuring a document as well. HTML documents always begin with a DOCTYPE declaration, and should include a HEAD and BODY, as well as charset declaration within the head.</p>

<ul>
<li>The HTML5 doctype is simply <code>&lt;!doctype html&gt;</code>, without a URL or version number.</li>
<li>Inside the HEAD (and within the first 512 bytes of the document), a META tag indicating the charset should be included, e.g. <code>&lt;meta charset=utf-8&gt;</code>. Note META tags are not required to be closed, and the charset value does not need to be quoted. Specifying the charset is essential for avoiding potential security issues in which a URL could be crafted to inject arbitrary script into the page body.</li>
</ul>
</li>
<li><p>The new HTML5 tags are supported in IE 9, Firefox 16, Chrome 23, Safari 5.1, iOS Safari 4.0, Android Browser 2.2, and Blackberry 7.0. To ensure support in older browsers, an HTML5 shim can be employed, or the JavaScript <code>document.createElement</code> API can be used to create elements that do not exist.</p></li>
</ul>


<h4>Create a layout container in HTML</h4>

<ul>
<li><p>Creating a layout container involves defining the elements that provide the overall structure to a page - positioning of the header/nav, footer, potential sidebar, and primary content.</p></li>
<li><p>The primary CSS attribute that affects the layout of block display elements is <code>position</code>. It can have the following values:</p>

<ul>
<li><code>absolute</code>: An element positioned absolutely is offset (trbl) from its first parent with non-static position. Absolutely-positioned elements do <em>not</em> participate in normal layout flow.</li>
<li><code>relative</code>: An element with relative position can be offset from its original/inherited position (trbl). Content moves, but originally reserved space is still preserved in flow.</li>
<li><code>static</code>: Static position is the default, items are flowed normally and (trbl) has no effect.</li>
<li><code>fixed</code>: Fixed position is (trbl) relative to the browser window and will not move when scrolled.</li>
</ul>
</li>
<li><p>When elements overlap, <code>z-index</code> must be considered. Higher z-index results in an element being positioned on top. Equal z-index results in the last item in the document being positioned on top.</p></li>
<li><p>Modern layouts are most commonly achieved by <code>float</code>ing various elements around each other. Floating allows sibling content to flow around an element, if there is room  next to it. If not, the floated element will wrap to the next line. Floated elements should be inserted <em>before</em> float:none elements.</p></li>
</ul>


<h2>To Be Continued...</h2>

<p>I think that's a good introductory post and plenty of basic material to chew on. In my next post we'll pick up with the next objective: "Write code that interacts with UI controls."</p>
]]></content>
  </entry>
  
</feed>
