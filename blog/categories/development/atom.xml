<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Aidan Ryan]]></title>
  <link href="http://www.aidanjryan.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://www.aidanjryan.com/"/>
  <updated>2013-10-11T18:44:38-07:00</updated>
  <id>http://www.aidanjryan.com/</id>
  <author>
    <name><![CDATA[Aidan Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Responsive Web Design - Introduction for ASP.NET MVC Developers]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/05/29/responsive-design-introduction-for-asp-dot-net-mvc-developers/"/>
    <updated>2013-05-29T12:53:00-07:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/05/29/responsive-design-introduction-for-asp-dot-net-mvc-developers</id>
    <content type="html"><![CDATA[<p>The term "Responsive Web Design" was coined in 2010 by Ethan Marcotte in his <a href="http://alistapart.com/article/responsive-web-design">canonical article</a> defining the technique. Recently, I spent some time researching the history and modern state of the art of Response Web Design (RWD). This article presents a survey of my findings, and provides examples of specific techniques. We'll focus on Visual Studio / ASP.NET MVC tools and techniques for getting the job done.<!--more--></p>

<h2>Defining Responsive</h2>

<p>In the context of Responsive Web Design, the term "responsive" is the opposite of "prescriptive." You've probably heard arguments against prescriptive approaches to language and grammar. Language and meaning are organic, evolving things that are constantly being re-created by their users. Prescriptivism in language does not account for its evolution, and can ignore the context and needs of its users. We have experienced "Prescriptive Web Design" from the dawn of the web, in the form of "best viewed in Netscape 4.0.3 on a 800 x 600 monitor at 16-bit color depth." The modern variation is a placeholder page replacing desired content with "sorry, this page not formatted for mobile devices" How short-sighted, to actually hide content from valuable eyeballs? Responsive Web Design is decidedly <em>not</em> prescriptive.</p>

<p>Responsive Web Design is a set of techniques that allow our pages to adapt to the capabilities of the client. Client, in this case, being both the electronic and human consumer of our content. The goal is to ensure that our content can be comfortably and accessibly consumed by as many devices and people, of varying capabilities, as possible.</p>

<p>These techniques respond to</p>

<ul>
<li><p>Browser capabilities (HTML5, native audio/video, CSS3, plugins)</p></li>
<li><p>Device capabilities (geolocation, resolution, input methods)</p></li>
<li><p>User capabilities (vision, hearing)</p></li>
<li><p>Viewport (media type, resolution, density, orientation)</p></li>
</ul>


<p>Prescriptive designs enforce requirements on the client: they require certain screen sizes, input devices, or plugin support to fully render content. Responsive designs inquire about the capabilities of the client and put forth the best possible experience given those capabilities. They are as functional as possible in limited scenarios and enhance the experience as capabilities increase.</p>

<h2>Why?</h2>

<p>Why use responsive techniques? The sweet spot for RWD is a balance of development effort and reach: responsive design techniques will get your content in front of the most eyeballs, in a usable form, the the least effort. This form may not be optimal for every client scenario, but the aim is to find an appropriate compromise where required, and to take advantage of advanced capabilities where possible.</p>

<p>Consider the polar approaches:</p>

<ul>
<li><p>The cheapest option is to design only for desktop and cross your fingers for mobile users. Desktop clients less restrictive and therefore simpler to target.</p></li>
<li><p>The most expensive option is to implement separate designs for phone, tablet and desktop (potentially even developing native mobile clients.) You will deliver the most optimal experience for each device, at greatly increased cost of development <em>and maintenance.</em></p></li>
</ul>


<p>Beyond the cost-reach compromise, RWD provides several other benefits:</p>

<ul>
<li><p><strong>Consistency</strong>: Delivery of a consistent experience across devices. Styling, navigation, and user experience will be familiar and aid users who arrive at your site using different clients at different times. There is a single set of markup and CSS to maintain, reducing the chance of styles "evolving apart" over time.</p></li>
<li><p><strong>Value First</strong>: RWD forces you to first examine the value of the content being delivered, then decide how to present it. The tendancy when designing for a single platform can be to dive into <em>Lorem Ipsum</em> wireframes before content is fully realized. A content-first approach results in a design that exists purely to support the maximum transmission of the value of content; wireframe-first approaches can result in designs with vestigial features that distract from content value.</p></li>
</ul>


<p>Responsive design is about delivering the greatest possible user joy regardless of the access method. It is not a dogma or a recipe, it's more of a mindset that is focused on experience first.</p>

<h2>Why Not?</h2>

<p>Responsive techniques are not useful or cost-effective for all applications. When the client capabilities are fully controlled, it is not necessary to design for multiple clients. Enterprise applications being deployed across known devices are the most common scenario here. Solutions that require specific interaction modes may not benefit from RWD, for example, interactions that are simply not possible on a touch device.</p>

<h2>History</h2>

<p>Here is a brief timeline of some influential articles that have led to the current state of thinking on Responsive Web Design:</p>

<ul>
<li><p><a href="http://alistapart.com/article/dao">John Allsopp - A Dao of Web Design</a>: Letting go of control in favor of accepting and adapting to client differences.</p></li>
<li><p><a href="http://alistapart.com/article/responsive-web-design">Ethan Marcotte - Responsive Web Design</a>: Original articulation of the principles.</p></li>
<li><p><a href="http://blog.cloudfour.com/css-media-query-for-mobile-is-fools-gold/">Jason Grigsby - CSS Media Query for Mobile is Fool's Gold</a>: First major rebuttal, warning that bandwidth suffers - additional HTML, CSS, and (potentially) JavaScript to render on a smaller screen with <em>more</em> code. Important for pivoting the discussion toward general adaptability away from a mobile "silver bullet."</p></li>
<li><p><a href="http://alistapart.com/article/organizing-mobile">Luke Wroblewski - Mobile First</a>: Refinement of responsive design approach working from most-constrained to least.</p></li>
</ul>


<h2>Core Techniques</h2>

<p>The original <strong>Responsive Web Design</strong> article defined the approach as being composed of three techniques: a Fluid Grid, Media Queries, and Flexible Images. Thinking in these areas has evolved a bit since the original article -- here are some thoughts on each of the original techniques:</p>

<ul>
<li><p><strong>Fluid Grid (Adaptive Grid)</strong> The original article names it "fluid," but this has come to mean proportional, which is not strictly required. An adaptive grid (and an adaptive layout in general) provides a framework for adjusting presentation to window sizes, resolutions, and screen densities. The earliest fluid layouts were focused on achieving proportional columns using CSS (a technique that was trivial using the common table-based layouts at the time). Further developments of adaptive layout are more focused on typography, especially given the emergence of high-density displays that make pixel- and point-sizing less reliable. A fully-fledged adaptive grid framework (potentially combined with a pre-defined base style set) can be a nice productivity boost.</p></li>
<li><p><strong>Media Queries</strong> The media query is a CSS3 feature that allows you to target CSS rules at specific ranges of window or screen size. The most common application of media queries in RWD is for adjusting the layout by repositioning or hiding certain elements as the available space is reduced.</p></li>
<li><p><strong>Flexible Images (Adaptive Media)</strong> The original article focuses on flexibly sizing and positioning images for smaller screen dimensions and lower bandwidth. Further thinking in this area has included selectively loading smaller image files in lower-bandwidth scenarios. With the addition of HTML5 Video and Audio capabilities, these media types should be considered as well.</p></li>
</ul>


<p>It is absolutely not essential to use all of these techniques in every web design effort. These primary techniques form the foundation of RWD thinking, and many additional techniques have been developed along the way. There is a toolbox available, and you can choose the appropriate tools for each job.</p>

<h2>Grid Systems</h2>

<h3>Grid System Rationale</h3>

<p>Many responsive sites rely on a grid system for layout. Abstracting the foundation of the layout provides a clean, consistent framework for positioning site components. A grid can be defined as a horizontal sectioning of the canvas in to columns and gutters. Content lives in columns, and gutters provide whitespace between them. Grids help us think about design, and they help users engage with your content. You can compare a CSS grid to the "snap to grid" function provided in form designer and presentation software: it provides convenient, consistent alignment and spacing for the elements on a page.</p>

<p>Several frameworks and generators exist that provide grid systems. They fall into four basic categories:</p>

<p>• <strong>Fixed</strong>: the container width is set to a fixed width, and the column count, column width, and gutter width are set to fixed fractions of the container. Column spanning is possible, but the container will never resize with the window.</p>

<p>• <strong>Responsive</strong>: a set of media queries provides a progressive step-down of container width, column count, column width, and gutter width.</p>

<p>• <strong>Fluid</strong>: the column count is fixed; container width, column width, and gutter width are percentages of the canvas.</p>

<p>• <strong>Fluid + Responsive</strong>: media queries set the container width and column count; within each breakpoint, column and gutter widths are proportional.</p>

<h3>Grid System Framework Comparison</h3>

<p>There are dozens of CSS grid frameworks available, at varying degrees of complexity, maturity, and compatibility. This list selects some notable popular frameworks that focus on different use cases, roughly ordered from simplest to more fully-featured. New ones are constantly being released that build on principles developed in those that came before.</p>

<table class="content-table">
    <tr>
        <th>Framework</th><th>Classification</th><th>Max size</th><th>Columns</th><th>Notes</th>
    </tr>
    <tr>
        <td><a href="http://960.gs">960gs</a></td><td>Static</td><td>960px</td><td>12 / 16</td><td>Grid only<br/>IE7+<br/>CSS</td>
    </tr>
    <tr>
        <td><a href="http://www.getskeleton.com/">Skeleton</a></td>
        <td>Responsive</td>
        <td>960px (desktop/tablet-landscape)<br/>768px (tablet-portrait)<br/>420px (mobile-landscape)<br/>300px (mobile-portrait)</td>
        <td>16</td>
        <td>Lightweight CSS framework<br/>IE7+<br/>CSS</td>
    </tr>
    <tr>
        <td><a href="http://responsive.gs/">responsive.gs</a></td>
        <td>Fluid + Responsive</td>
        <td>Any<br/>Columns stack below 768px</td>
        <td>12/16/2024</td>
        <td>Grid only<br/>IE7+<br/>CSS</td>
    </tr>
    <tr>
        <td><a href="http://neat.bourbon.io/">Bourbon Neat</a></td><td>Fluid + Responsive</td><td>Any</td><td>12<br/>(or custom)</td><td>Grid addon to Bourbon<br/>IE9+<br/>Sass</td>
    </tr>
    <tr>
        <td><a href="http://twitter.github.io/bootstrap/">Bootstrap</a></td>
        <td>Static OR<br/>Fluid OR<br/>Fluid + Responsive</td>
        <td>Static: 940px<br/>Others: Any (nestable)</td>
        <td>16</td>
        <td>Full client-side framework<br/>IE6+<br/>LESS</td>
    </tr>
</table>


<p>Some additional notes on the grid frameworks:</p>

<ul>
<li><p><strong>960gs</strong> The granddaddy. A good starting point to understand the concepts to launch you toward rolling your own. Viable for sites that are likely to have only desktop traffic. Consider 1140 grid given rise of wider screens.</p></li>
<li><p><strong>Skeleton</strong> Relatively minimal and easily customizable. Provides a layout skeleton (output) and CSS skeleton (source) with reset/sane defaults /media-query breakpoints for you to customize. Has not been maintained in a while (lots of open Github issues) - the dmur fork is more active.</p></li>
<li><p><strong>Bourbon Neat</strong> Relies exclusively on Sass mixins - no classes applied to markup. Extremely customizable.</p></li>
<li><p><strong>Responsive.gs</strong> Enforces border-box box-sizing model on all elements.</p></li>
<li><p><strong>Bootstrap</strong> Probably the best-known (or at least most buzzed-about) client-side framework available. A complete suite of layout, styling, and input/interactivity tools. Tends to leave a recognizable stamp on the appearance of the site.</p></li>
</ul>


<p>Note that responsive features rely on media queries - grids with responsive features will serve either the desktop or mobile view to &lt;= IE8 depending on whether they are "mobile first" or "desktop first." JavaScript polyfills may be leveraged to extend back-compatibility to earlier browsers than those targeted by the framework.</p>

<p>It can be difficult to adapt an existing project to use a CSS framework - the framework may rely on certain style reset features, typographic assumptions, box-model settings, or other styling techniques that are not compatible with the existing codebase. Even for new work, adoption of a framework can assert a certain identifiable look and feel (for example, the Bootstrap buttons and navbar). It is worth spending time customizing the base style to ensure unique branding. This will often require you to learn at least the basics of a CSS preprocessor tool like LESS or Sass.</p>

<h3>Grid System Demo</h3>

<p>A page demonstrating the <a href="http://responsive.gs">responsive.gs</a> grid system can be found here: <a href="http://codecampresponsive.apphb.com/Home/ResponsiveGs">DEMO</a>. View the page on a mobile device and/or experiment with resizing the browser window.</p>

<p>Responsive.gs provides a very lightweight framework purely focused on grid layout; it does not enforce any look-and-feel on the site. The framework applies the <code>box-sizing: border-box</code> CSS rule to all elements, enabling a simpler sizing model. This rule makes it easier to calculate sizing in layouts: it changes the box size calculation to include padding and border in the overall height and width of a box. Due to this low-level rule, adoption of responsive.gs into an existing layout could result in some painful size adjustments. However, you'll find that starting fresh with this rule applied can make layout size calculations much more intuitive.</p>

<p>The framework is proportionally fluid at widths above 768px, while all columns stack vertically at 100% width on smaller screens. It's very simple to lay out columns with responsive.gs: apply the <code>row</code> class to define a full-width row, then use the <code>col</code> and <code>span_*</code> classes to set proportional column widths within the row.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>responsive.gs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;col span_6 bg4&quot;</span><span class="nt">&gt;&lt;h3&gt;</span>col span_6<span class="nt">&lt;/h3&gt;&lt;img</span> <span class="na">class=</span><span class="s">&quot;left-quarter&quot;</span> <span class="na">src=</span><span class="s">&quot;http://fillmurray.com/200/300&quot;</span><span class="nt">&gt;&lt;p&gt;</span>Column 1.<span class="nt">&lt;/p&gt;&lt;/article&gt;</span>
</span><span class='line'>  <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;col span_6 bg3&quot;</span><span class="nt">&gt;&lt;h3&gt;</span>col span_6<span class="nt">&lt;/h3&gt;&lt;p&gt;</span>Column 2.<span class="nt">&lt;/p&gt;&lt;/article&gt;</span>
</span><span class='line'>  <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;col span_4 bg2&quot;</span><span class="nt">&gt;&lt;h3&gt;</span>col span_4<span class="nt">&lt;/h3&gt;&lt;p&gt;</span>Column 3.<span class="nt">&lt;/p&gt;&lt;/article&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Compatibility notes: Because the <code>box-sizing</code> rule is not supported on IE7 or lower, a polyfill (for inclusion using conditional comments) is provided. The framework is "mobile first", in that all columns are laid out to 100% width in the base style, then set to proportional widths within a media query. This means that users of IE8 and below will receive the mobile experience.</p>

<h2>Media Queries</h2>

<p>Media queries are mostly about width, width, width. We generally assume that our layouts are equal to the width of the browser window and that they can be infinitely long. Thank goodness we aren't working with fixed-height pages! Everyone expects to scroll vertically when viewing a page, and the mouse wheel convention is to scroll the page vertically. There are some clever / artistic layouts that scroll horizontally, but these can be difficult for users to "grok" initially, and should only be used for specialized content and audiences. (A media query can reference height, and there are some interesting cases where that can be useful described <a href="http://trentwalton.com/2012/01/11/vertical-media-queries-wide-sites/">here</a>.)</p>

<p>Given that the primary constraint on our designs is the width of the page, it's very useful to be able to write width-aware CSS rules. When there is room, allow elements to be positioned next to one another horizontally. When there isn't, reposition elements into a vertical flow, remove non-essential elements, and/or provide methods for the user to toggle the visibility of lower-priority elements.</p>

<h3>Selecting Breakpoints</h3>

<p>The horizontal width where a media query changes the layout is referred to as a "breakpoint." There are many references that attempt to provide the screen dimensions of popular devices, which one could adopt for layout breakpoints. This approach is <em>not</em> workable, because the device landscape is constantly changing - it would result in an explosion of difficult-to-maintain rules, and bloat the size of the CSS transmitted to the browser.</p>

<p>Here is an overview of a workflow that can help identify the most appropriate breakpoints for an application:</p>

<ul>
<li><p>CONTENT is king. It's not possible to select and design around a set of device-based breakpoints. CSS will be heavy and under-performing, and compromises will be made to "fit in the box." It's better to evaluate your content and think in general terms about presenting it in "big," "middle," and "small" contexts.</p></li>
<li><p>Start at a size near your initial wireframe target, and start resizing until things start looking "wrong"</p></li>
<li><p>Set a breakpoint with some breathing room before things go haywire, then apply rules to fix the layout in the "wrong side"</p></li>
<li><p>Repeat this exercise moving inward and outward until unreasonably small and large</p></li>
<li><p>Three sizes, small /medium / large, represent a maintainable sweet-spot</p></li>
</ul>


<p>Additional considerations for media query breakpoints:</p>

<ul>
<li><p>Line length is important. On wider layouts, it may be useful to set max-width to a comfortable reading length and allow margins to increase as the viewport grows wider. In browsers that support it, CSS3 multi-column can allow content to flow to multiple columns and avoid whitespace in wider scenarios.</p></li>
<li><p>Scaling widths out in ems proportionally to a base-font em ensure your design renders consistently across operating systems with missing fonts, user-selected fonts, zooms, and display densities.</p></li>
<li><p>Knowledge of common device widths is useful (along with testing the site on biggest-marketshare devices), but creating a layout appropriate to the content is most important of all.</p></li>
<li><p>iOS reports <em>portrait</em> <code>device-width</code> and <code>device-height</code> regardless of orientation (use <code>orientation</code> in query to differentiate)</p></li>
</ul>


<h3>Size, Move, Hide, Replace, or Transform?</h3>

<p>There are many options available for style specializations inside a media query. This list defines the most common techniques:</p>

<ul>
<li><p><strong>Size</strong>: Shrink box and / or font</p></li>
<li><p><strong>Move</strong>: Reposition an element (most commonly moving horizontally laid out columns to vertically stacked)</p></li>
<li><p><strong>Hide</strong>: Remove entirely</p></li>
<li><p><strong>Replace</strong>: Provide the same function in a smaller package (common example – list of navigation links collapsed to navigation menu menu)</p></li>
<li><p><strong>Transform</strong>: Maintain the same markup, but change its initial presentation (e.g. collapsing a context box into an accordion)</p></li>
</ul>


<p>Selection of the most appropriate technique depends on several factors:</p>

<ul>
<li><p>Semantics of the element / component</p></li>
<li><p>May descend from size > move > hide at cascading breakpoints</p></li>
<li><p>Remember that the most-important content should come first in markup for accessibility and SEO (see grid system push / pull classes)</p></li>
</ul>


<h3>The Mobile Viewport</h3>

<p>In order to effectively leverage media queries for mobile devices, it is necessary to include the <code>viewport</code> meta tag in the <code>head</code> of the page, like so:</p>

<pre><code>&lt;meta name="viewport" content="width=device-width" /&gt;
</code></pre>

<p>This instructs the mobile browser to treat device pixels as CSS pixels, that is, for the physical and virtual dimensions of the screen to be the same. (This is a bit of an oversimplification, since multiple high-density display pixels are sometimes treated as a single virtual device pixel. See <a href="http://www.quirksmode.org/mobile/viewports.html">A Tale of Two Viewports</a> for an excellent explanation.) When the <code>viewport</code> tag is not present, most mobile browsers will effectively "zoom" a larger virtual viewport into the smaller physical device viewport, by treating a device pixel as multiple CSS pixels. When mobile devices first became capable of browsing the web, this behavior was necessary to provide enough space to lay out pages designed exclusively for the desktop. Users employ the "double-tap zoom" gesture to focus on portions of the page.</p>

<p>The <code>viewport</code> meta tag allows us to instruct the browser how to treat the Layout Viewport relative to the Visual Viewport. Let's examine the differences between the Layout Viewport and the Visual Viewport.</p>

<p><strong>Layout Viewport</strong></p>

<ul>
<li><p>CSS pixels available to layout</p></li>
<li><p>Resize of a Desktop browser window resizes the Layout Viewport and causes a reflow</p>

<ul>
<li><p>The Mobile Layout Viewport is set at the initial load and does not change</p></li>
<li><p>Mobile devices play some extra tricks with text wrapping - divs will lay out correctly, but the wrap point may be adjusted based on double-tap zoom size; text may re-wrap on zoom as well.</p></li>
</ul>
</li>
</ul>


<p><strong>Visual Viewport</strong></p>

<ul>
<li><p>The Visual Viewport is the CSS pixel dimension of the visible area of the page</p></li>
<li><p>Resize of a Desktop browser window resizes the Visual Viewport</p></li>
<li><p>Mobile zoom resizes the Visual Viewport</p></li>
</ul>


<p>Additional notes on the <code>viewport</code> meta-tag:</p>

<ul>
<li><p>Controls the layout viewport</p></li>
<li><p>Determines the number of device pixels per CSS pixel at zoom = 1</p></li>
<li><p>99% of the time, use the <meta name=“viewport” content=“width=device-width”> tag</p></li>
<li><p>For most modern devices, the default iOS and Android layout viewport width is 980 CSS pixels, with initial scale set to match the visual viewport</p></li>
<li><p>The content attribute is comma-separated</p>

<ul>
<li><p>Width = [px|device-width]. Device width is “screen width in CSS pixels at 100% zoom”</p></li>
<li><p>Height – little-used</p></li>
<li><p>Initial-scale = device pixel multiplier</p></li>
<li><p>Maximum-scale = device pixel multiplier</p></li>
<li><p>User-scalable = [true|false]. Whether to allow the user to scale. Think very carefully before limiting this.</p></li>
<li><p>CSS 2.1 recommends that CSS pixels correlate to one 96dpi pixel at arms’ length; initial-scale=1 requests this</p></li>
</ul>
</li>
<li><p>IE10 on Windows 8 ignores the viewport meta tag in snapped view. You need the following CSS declaration:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@-ms-viewport</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">pre</span><span class="o">&gt;&lt;</span><span class="nt">code</span><span class="o">&gt;</span><span class="nt">width</span><span class="o">:</span> <span class="nt">device-width</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">code</span><span class="o">&gt;&lt;/</span><span class="nt">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Tangent: ASP.NET MVC Technique - Server-side mobile refinement</h3>

<p>This topic is not directly related to media queries, but can be used in conjunction with them to achieve comfortable layout <em>and</em> bandwidth reduction while maintaining a single page of markup. It is important to remember that content hidden with <code>display: none</code> is still downloaded. The idea behind the following technique is to remove a component from the layout flow using a media query, and apply server-side processing to entirely eliminate its content from the payload.</p>

<p>Here is an overview of the steps involved:</p>

<ul>
<li><p>Add the <a href="http://nuget.org/packages/51Degrees.mobi">NuGet package</a> from <a href="http://51degrees.mobi">51Degrees.mobi</a> for better device detection. Inclusion of this package causes the <code>Request.Browser.IsMobileDevice</code> property to be set for each request, detecting a much broader range of devices than the out-of-box behavior.</p></li>
<li><p>An alternative is the <a href="http://DetectMobileBrowsers.com">DetectMobileBrowsers.com</a> regex for simple useragent-based detection.</p></li>
<li><p>In your server-side markup (.aspx or .cshtml), wrap the component you wish to hide from mobile devices as follows:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@if (!Request.Browser.IsMobileDevice) {<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>section class=&quot;sidebar&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>Check out my twitter feed:<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>ul<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span>Post 1<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span>Post 2<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;</span>Post 3<span class="ni">&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/section<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Implement a media query to flow the remainder of the layout into the previously-occupied space.</p></li>
<li><p>When Output Caching is in use, ensure the mobile and non-mobile variations of the page are cached separately. Include the attribute <code>[OutputCache(Duration = 60, VaryByCustom = "Mobile")]</code> on each controller action that relies on this technique. Provide the custom cache key by overriding <code>GetVaryByCustomString</code> in <code>Global.asax.cs</code>:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GetVaryByCustomString</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">custom</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">custom</span> <span class="p">!=</span> <span class="s">&quot;Mobile&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Browser</span><span class="p">.</span><span class="n">IsMobileDevice</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Depending on the nature of the content, you may wish to provide a way for the user to asynchronously request it after the initial page load.</li>
</ul>


<p>You can see this technique in action here: <a href="http://codecampresponsive.apphb.com/Home/OutputCacheMobileHiding">DEMO</a>. View the source of the page from a mobile device (or with a mobile user agent string) to verify that the sidebar is not transmitted. On desktop devices, the sidebar is included and hidden/shown as the page width changes.</p>

<h2>Adaptive Media</h2>

<p>In Marcotte's original article, the only medium considered for adaptability was the image. Modern sites deliver images, video, and audio to devices of varying capabilities. The following sections describe responsive techniques for dealing with all three.</p>

<p>A page demonstrating many of the following techniques is available here: <a href="http://codecampresponsive.apphb.com/Home/ResponsiveMedia">DEMO</a>.</p>

<h3>Responsive Images</h3>

<p>We must consider layout and bandwidth when planning a responsive approach for images. Here are some notes on responsive image techniques:</p>

<ul>
<li><p><strong>Scaling</strong>: Basic image scaling can be accomplished with <code>width: 100%</code> and <code>max-width</code> CSS properties. IE7 may require a polyfill depending on other CSS properties in use.</p></li>
<li><p><strong>Cropping</strong>: At media query breakpoints, set negative margins with overflow: hidden to avoid shrinking the image and</p></li>
<li><p><strong>Swap/Omit</strong>: On the server side, alternative image href may be set in markup, or images may be omitted when a mobile browser is detected. An HTTP handler may be employed to dynamically scale images according to user agent. Client-side techniques for selecting images according to page size exist, but there is no silver bullet - most of these techniques will result in multiple image downloads or suffer from very un-semantic (and potentially non-accessible) markup.</p></li>
<li><p><strong>SVG</strong>: Scalable Vector Graphics images have the benefit of full-fidelity scaling with a single file. Internet Explorer introduced SVG support in IE9, so a fallback is required for earlier IE versions. As with most "swap" techniques, it's important to monitor network traffic and avoid transmission of both files, when possible, or to employ a server-side approach.</p></li>
</ul>


<p>Be sure to choose the correct image format. PNG works best for logos and vectors, JPEG for photos and other realistic images. GIF should rarely be used, though can be effective for &lt;= IE6 as a work around for PNG transparency. Losslessly optimize your PNG images - this can reduce size by a surprising amount (see <a href="http://http://pnggauntlet.com/">PngGauntlet</a> for example).</p>

<h3>Responsive Video</h3>

<p>HTML5 introduced full video support, which modern browsers all handle. HTML5 video is generally more performant and less buggy than relying on plugin-based approaches. It is necessary, though, to provide a fallback for older browsers - the goal with video is a balance of performance and compatibility.</p>

<ul>
<li><p>Supply VP8- and H.264-encoded files and you will cover nearly all user agents</p></li>
<li><p>Omitting the type from the final source will cause most browsers to check the metadata to determine if it can be played. Bandwidth / accessibility tradeoff.</p></li>
<li><p>One <em>could</em> use the little-known <code>media</code> attribute to serve smaller files to smaller devices, although at the time of this writing it appears this attribute may be dropped.</p></li>
<li><p>IIS NOTE: need to add mime types for video, or IIS will return a 404.3. See <code>Web.config</code> section <code>system.webserver\staticContent\mimeMap</code>.</p></li>
<li><p>Within the video tag, below the sources, include a flash fallback and video download link (for users without flash).</p></li>
<li><p>Use JavaScript and/or HTTP module and user agent detection to serve appropriate codec and filesize</p></li>
<li><p>Good resources:</p>

<ul>
<li><p>Mark Pilgrim’s excellent, very in-depth (though getting out-of-date) guide: http://diveintohtml5.info/video.html</p></li>
<li><p>Concise, easy to read guide from JWPlayer: http://www.longtailvideo.com/support/jw-player/jw-player-for-flash-v5/22644/using-the-html5-video-tag/</p></li>
<li><p><a href="http://flowplayer.org/">FlowPlayer</a> is a pre-packaged, responsive, broadly compatible option.</p></li>
<li><p>Nice tool for generating markup: <a href="http://camendesign.co.uk/code/video_for_everybody">Video for Everybody</a></p></li>
</ul>
</li>
</ul>


<p>Don't discount the option of hosting the video externally (Vimeo, Youtube) and IFRAMEing in a player – they’ve solved the cross-browser issues and will take bandwidth &amp; connection pressure off your server.</p>

<p><strong>Flexible video sizing:</strong></p>

<ul>
<li><p>For the <code>&lt;video&gt;</code> tag, you can rely on <code>width: 100%</code> and <code>max-width</code> with <code>height: auto</code> to flexibly resize video while maintaining aspect ratio.</p></li>
<li><p>Flash and IFRAMEs have issues – can’t automatically set height to preserve the aspect ratio. Thierry Koblentz “Creating Intrinsic Ratios for Video” to the rescue - <a href="http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/">post</a>.</p>

<ul>
<li><p>Set a wrapper DIV with relative position, zero height, and bottom-padding representing the aspect radio (e.g. 56.25% == 16:9)</p></li>
<li><p>Set an inner div absolutely positioned with 100% width and height</p></li>
<li><p>This technique has issues in IE7 and below – use a conditional style sheet</p></li>
</ul>
</li>
</ul>


<h3>Responsive Audio</h3>

<p>Techniques for audio largely follow those for video, except that layout adjustment is not really a concern. Rely on the HTML5 <code>audio</code> tag with fallbacks, and provide download links for users without plugin support. On the server side, consider serving files encoded to lower bit rates when mobile devices are detected.</p>

<h2>Other Considerations</h2>

<p>Now that we have covered the the three primary categories of responsive web design techniques, let's briefly visit some related considerations.</p>

<h3>Forms</h3>

<p>Forms must provide a usable mobile layout and be touch-friendly. The following are important points to consider for responsive forms:</p>

<ul>
<li><p>Note the “field zoom” feature of many mobile browsers. When an input field is focused, the browser will zoom the viewport to the width of the field.</p>

<ul>
<li><p>This makes top-aligned labels better, otherwise the label or field may be cut off.</p></li>
<li><p>Set <code>input, textarea { font-size: 1em }</code> to avoid extra zoom on iDevices – lower font sizes will introduce additional zoom</p></li>
</ul>
</li>
<li><p>Touch-friendly</p>

<ul>
<li><p>Sizing (finger targets): extra padding on inputs, and larger label targets for radio and checkbox controls.</p></li>
<li><p>Click versus Touch events: there is a delay between the initial touch event and final click event, during which the browser is waiting for a potential gesture. If you know that a given control has no gesture interaction, you can trigger interactions from the touch event, resulting in faster response. This can be difficult to implement reliably - see <a href="http://labs.ft.com/articles/ft-fastclick/">FT Fastclick</a> for a solid implementation.</p></li>
</ul>
</li>
<li><p>Input Types</p>

<ul>
<li><p>HTML5 introduces new values for the <code>input</code> element's <code>type</code> attribute. Mobile browsers key off this attribute to provide the most appropriate keyboard layout for the type (e.g. email type results in keyboard with @ symbol).</p></li>
<li><p>Some desktop browsers implement some native validation and specialized input controls for certain input types. This may not be desired - the <code>form</code> element's <code>novalidate</code> attribute can prevent native validation, and CSS can be used to prevent browser-substituted controls.</p></li>
</ul>
</li>
</ul>


<h3>Typography</h3>

<p>The trend is toward more minimal interfaces that place typography in the forefront. The increased prevalence of high-density displays makes the display of beautiful type accessible to a greater number of users. Consider the following points related to typography:</p>

<ul>
<li><p>The user (or at least platform developer) has already specified his / her preferred default font size. Rather than overriding this, we should respect it as a base and scale from there.</p></li>
<li><p>New “retina”-class devices and high density displays can make pixel sizing unreliable. The future of the “pixel” is uncertain - <code>em</code> should be the default sizing unit, unless you have a really good reason to use pixels.</p></li>
<li><p>On higher-density displays, you may wish to increase font weight to achieve a uniform result across displays. Antialiasing on lower-density displays results in greater perceived weight given the same font on a higher-density display.</p></li>
<li><p>On standard-density displays, serif fonts below 12px are not sharp enough. But you should be over 12px anyway.</p></li>
<li><p>Good Metrics</p>

<ul>
<li><p>Font size: bigger than you think. Hold a book or magazine at a comfortable distance and compare.</p></li>
<li><p>Contrast: ratio font color to background brightness. Steer clear of full black (looks like a “hole”) and full white.</p></li>
<li><p>Line Height: for text, 140% of font size is a good general rule, but depends on face (ascender/descender ratio to x-height and “blackness”). In CSS, use proportional line-height notation (e.g. <code>font: Arial 1em/1.44</code>) with no units.</p></li>
<li><p>Line Length (measure): From 45 to 75 characters is good balance of ease in tracking to next line versus not having to do it too often. When browsers support it, you can use CSS3 column count when the view gets very wide. You can leave width “on the table” and set a <code>max-width</code>. Ensure text blocks have good height in proportion to width.</p></li>
<li><p>Spacing: Headings can often use more vertical padding to breathe</p></li>
</ul>
</li>
<li><p>Gotchas</p>

<ul>
<li><p>Note that when using fluid (proportional) layout techniques, you give up some control over line length</p></li>
<li><p>Web Font browser quirks and format support (use <a href="http://www.fontsquirrel.com/">Font Squirrel</a>)</p></li>
<li><p>When serving locally, apply correct mimetype to web fonts</p></li>
</ul>
</li>
</ul>


<h2>Conclusion</h2>

<p>Responsive Web Design has been around for several years, and has been gathering steam since its introduction. There is no "one size fits all" approach for cross-device sites - careful evaluation and application of the available techniques is required. Good luck on your projects!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML and jQuery: Displaying and Positioning Custom Tooltips]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/04/25/html-and-javascript-positioning-a-custom-tooltip/"/>
    <updated>2013-04-25T11:15:00-07:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/04/25/html-and-javascript-positioning-a-custom-tooltip</id>
    <content type="html"><![CDATA[<p>At a client I was recently tasked with implementing a site that presents tooltips with a custom appearance. I thought I'd share some lessons learned about consistently displaying the tooltips and working around positioning problems.<!--more--></p>

<h2>Removing existing tooltips</h2>

<p>In the site I am working with, the custom tooltips must be displayed for an ASP.NET control that has its own tooltip implementation. This means that when the page is initially rendered, the <code>title</code> attribute is already set on the items where I need custom tooltips. This means I need to remove the title attribute but preserve its text for displaying later in my custom tooltip. There is an other wrinkle, in that the site is displayed in Internet Explorer's quirks mode, which means the <code>alt</code> attribute will also display a browser tooltip on hover. I needed to remove the <code>alt</code> attribute as well, to avoid "double tooltips" with my custom tooltip and the browser tooltip being displayed simultaneously.</p>

<p>Here's a snippet illustrating the technique:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$map</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;area&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$area</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$area</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-customtooltip&#39;</span><span class="p">,</span> <span class="nx">$area</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">$area</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s1">&#39;alt title&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The control uses an image map to provide tooltip and interactive functions. I get a jQuery object for the <code>map</code>, then iterate is children. The <code>title</code> attribute is copied to a <code>data-customtooltip</code> attribute, and the <code>alt</code> and <code>title</code> attributes are removed to prevent display of the native browser tooltip.</p>

<h2>Displaying and positioning the custom tooltip</h2>

<p>The next piece of the puzzle is displaying a custom tooltip when the mouse is over an <code>area</code>. I include the following HTML in the master layout page:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span>
</span><span class='line'>  <span class="na">id=</span><span class="s">&quot;tooltip&quot;</span>
</span><span class='line'>  <span class="na">style=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">    position: fixed;</span>
</span><span class='line'><span class="s">    z-index: 999;</span>
</span><span class='line'><span class="s">    display: none;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This creates a <code>div</code> that is initially invisible and detached from the overall page layout. Of course, the <code>div</code> is also styled to fit with the site's overall theme.</p>

<p>Back in the JavaScript, I hooked the <code>mouseenter</code> event to set the tooltip text and then display the hidden <code>div</code>. Initially, I simply positioned the <code>div</code> below and to the left of the mouse pointer. Unfortunately, this naive positioning technique falls down when the mouse is near the lower-right corner of a page or frame: the tooltip is cut off at the page/frame edge. Native browser tooltips "float" above the page surface and can even extend beyond the edges of the browser window, but this is not possible with an HTML element. To work around this issue, I detect the "quadrant" of the page that the mouse cursor occupies, and position the tooltip away from the page corner. For example, if the mouse cursor is nearest the lower-right corner, I position the tooltip above and to the left of the cursor.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$tooltipDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tooltip&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$map</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="s1">&#39;area&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set the tooltip text from our custom attribute</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">customTitle</span> <span class="o">=</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-customtooltip&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">customTitle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// determine if the mouse is in the left / top &quot;halves&quot; of the document</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mouseLeft</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientWidth</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mouseTop</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientHeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// position the tooltip away from the mouse quadrant</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">css</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">mouseLeft</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">css</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nx">css</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="p">(</span><span class="mi">7</span> <span class="o">+</span> <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">width</span><span class="p">())</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">mouseTop</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">css</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nx">css</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="p">(</span><span class="mi">7</span> <span class="o">+</span> <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">height</span><span class="p">())</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">css</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">mouseleave</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">$tooltipDiv</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that I am always using the <code>left</code> and <code>top</code> CSS attributes to position the <code>div</code>. I ran into strange issues when I attempted to set the left/top to auto and position using right/bottom. I don't think Internet Explorer supports positioning in this manner.</p>

<p>Also note that I don't attach the <code>mouseenter</code> handler to each <code>area</code> directly. There can be dozens of areas on the page that require a tooltip - hooking up that many event handlers would not perform as well. It's better to attach a single handler for when the event bubbles to the <code>map</code>, then let jQuery filter for the child elements that we want to deal with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Windows Store (WinRT) TFS Work Item Browser]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/02/04/a-windows-store-winrt-tfs-work-item-browser/"/>
    <updated>2013-02-04T13:55:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/02/04/a-windows-store-winrt-tfs-work-item-browser</id>
    <content type="html"><![CDATA[<p>It's time to dive into Windows Store application development. I've developed several tools for the Team Foundation Server (TFS) ecosystem, so I think an appropriate first project that will intersect my existing skill set would be a TFS Work Item browser.<!--more--></p>

<h2>The Plan</h2>

<p><img class="right" src="/images/tfsworkitems_start_icon.png" title="TFS Work Items start screen icon" alt="TFS Work Items start screen icon"></p>

<p>The app will be a simple work item browser. After entering your TFS server connection information, you'll be presented with a list of Team Projects. Select a Team Project and browse through Work Items. This will allow me to explore navigation, paging, presentation, and other new idioms in the WinRT platform.</p>

<p>There is an interesting wrinkle here: the TFS API client assemblies are not usable from WinRT. A brief attempt at hitting the TFS ASMX services directly proved too frustrating to waste time on - after all, the goal is to push my Windows Store app skills. This led me to the decision to host a TFS proxy on <a href="http://appharbor.com">AppHarbor</a> that would provide a simple ASP.NET Web API endpoint for retrieving Work Items, which should be simple to access from WinRT. Another option for proxying to TFS could have been the <a href="http://blogs.msdn.com/b/briankel/archive/2013/01/07/odata-service-for-team-foundation-server-v2.aspx">OData Service for Team Foundation Server</a>, except that it is configured to connect only to a single server. I want my app's users to be able to connect an arbitrary TFS server, which would require them to set up the OData service themselves. I opted instead to stand up a small service that allows connection to any TFS server and provides just enough functions for my app.</p>

<p>You can find the source for the <a href="http://github.com/ajryan/TfsWorkItems">TfsWorkItems</a> work item browser and <a href="http://github.com/ajryan/TfsProxy">TfsProxy</a> API proxy at my <a href="http://github.com/ajryan">Github profile</a>.</p>

<p>The app itself is available for testing in this <a href="/assets/TfsWorkItems_1.0.0.0_AnyCPU_Test.zip">ZIP archive</a>. Extract, and then run the <code>Add-AppDevPackage.ps1</code> PowerShell script to install the app.</p>

<h2>Web API Proxy</h2>

<p>As described above, in order to get to the TFS data from WinRT, I will stand up a simple Web API service with methods for retrieving Team Projects and Work Items. I created a Web API project and added controllers named <code>ProjectsController</code> and <code>WorkItemsController</code>. Along the way, I am using the handy <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm">Postman</a> REST Client extension for Chrome to hit my service methods as I build them out. Fiddler or curl would be just as effective.</p>

<h3>TFS Connection</h3>

<p>The first thing I need is a connection to TFS - this requires a TFS URI, username, and password. Both of my controllers will require a connection, so I will compose this dependency to avoid cluttering all of the API calls with the TFS connection information. This will be implemented via an action filter that provides a TFS Connection in the current HttpContext.</p>

<p>My <code>TfsBasicAuthenticationAttribute</code> action filter passes the request headers to a <code>UserDataPrincipal</code> (<code>IPrincipal</code>) that provides a factory method named <code>InitFromHeaders</code>. This method handles the parsing of the connection information from the request headers. If no principal is returned, or if connecting to TFS with the given connection information fails, an HTTP 401 Unauthorized response is returned. When a connection issue occurs, the specific reason for failure is provided in the response content.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TfsBasicAuthenticationAttribute  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">TfsBasicAuthenticationAttribute</span> <span class="p">:</span> <span class="n">ActionFilterAttribute</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="n">OnActionExecuting</span><span class="p">(</span><span class="n">HttpActionContext</span> <span class="n">actionContext</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">userDataPrincipal</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">User</span> <span class="k">as</span> <span class="n">UserDataPrincipal</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">userDataPrincipal</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">userDataPrincipal</span> <span class="p">=</span> <span class="n">UserDataPrincipal</span><span class="p">.</span><span class="n">InitFromHeaders</span><span class="p">(</span><span class="n">actionContext</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">userDataPrincipal</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SetUnauthorizedResponse</span><span class="p">(</span><span class="n">actionContext</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">configUri</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">userDataPrincipal</span><span class="p">.</span><span class="n">TfsUrl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">provider</span> <span class="p">=</span> <span class="n">userDataPrincipal</span><span class="p">.</span><span class="n">GetCredentialsProvider</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">tfsConfigServer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TfsConfigurationServer</span><span class="p">(</span><span class="n">configUri</span><span class="p">,</span> <span class="n">provider</span><span class="p">.</span><span class="n">GetCredentials</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tfsConfigServer</span><span class="p">.</span><span class="n">EnsureAuthenticated</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Items</span><span class="p">[</span><span class="s">&quot;TFS_CONFIG_SERVER&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">tfsConfigServer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="n">TeamFoundationServerUnauthorizedException</span> <span class="n">ex</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SetUnauthorizedResponse</span><span class="p">(</span><span class="n">actionContext</span><span class="p">,</span> <span class="n">ex</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">User</span> <span class="p">=</span> <span class="n">userDataPrincipal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">OnActionExecuting</span><span class="p">(</span><span class="n">actionContext</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">SetUnauthorizedResponse</span><span class="p">(</span><span class="n">HttpActionContext</span> <span class="n">actionContext</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">messageValue</span> <span class="p">=</span> <span class="n">message</span> <span class="p">??</span> <span class="s">&quot;Authorization (Basic) and TfsUrl headers are required.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">actionContext</span><span class="p">.</span><span class="n">Response</span> <span class="p">=</span> <span class="n">actionContext</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Unauthorized</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Message</span> <span class="p">=</span> <span class="n">messageValue</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">string</span> <span class="n">tfsUrl</span> <span class="p">=</span> <span class="n">actionContext</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">GetTfsUrl</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">tfsUrl</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">actionContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&quot;WWW-Authenticate&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Basic realm=\&quot;{0}\&quot;&quot;</span><span class="p">,</span> <span class="n">tfsUrl</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><blockquote><p></p></p><p><p>Note that in the SetUnauthorizedResponse method, I am adding the WWW-Authenticate header with the realm set to the TFS URL. Responding with a combination of HTTP 401 and this header is the standard for negotiating Basic Authentication. The WinJS.xhr wrapper for XMLHttpRequest handles this negotiation by automatically prompting for username and password in a modal popup, and then re-issuing the request with the Authorization header correctly encoded for Basic Authentication.</p></p><p><p></p></blockquote></p>

<p>The <code>UserDataPrincipal</code> class used here implements <code>IPrincipal</code> and in its <code>InitFromHeaders</code> method, extracts the username, password, and TFS URL from the HTTP headers. The username and password are retrieved from the HTTP Authorization header using the Basic Authentication standard, and the TFS URL is expected in a separate HTTP header named TfsUrl. Upon authenticating with the TFS Configuration Server, its instance is stored in the current HTTP context. The <code>UserDataPrincipal</code> class also supplies an <code>ICredentialsProvider</code> to the <code>TfsConfigurationServer</code> constructor, which is the interface for providing the domain credentials.</p>

<h3>Retrieving the Team Projects list</h3>

<p>After applying the <code>TfsBasicAuthorization</code> attribute to the <code>ProjectsController</code>, I have access to the <code>TfsConfigurationServer</code> for retrieving information about Team Projects on the server. The highest level of organization within Team Foundation Server is a "Project Collection" that contains one or more Team Projects. Project Collections are accessed by by querying the configuration server's <code>CatalogNode</code> for children with resource type <code>ProjectCollection</code>. For each Team Project Collection node, I get its <code>WorkItemStore</code> service and iterate its <code>Projects</code> collection looking for Team Projects where the authorized user has Work Item read rights. This method returns a list of <code>TeamProjectInfo</code> data transfer objects. Note that for each Team Project, I am including a list of the available Work Item Types. This will be leveraged for filtering in the app.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ProjectsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;[</span><span class="n">TfsBasicAuthentication</span><span class="p">]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProjectsController</span> <span class="p">:</span> <span class="n">ApiController</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="c1">// GET api/projects</span>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TeamProjectInfo</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Get</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">configServer</span> <span class="p">=</span> <span class="p">(</span><span class="n">TfsConfigurationServer</span><span class="p">)</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Items</span><span class="p">[</span><span class="s">&quot;TFS_CONFIG_SERVER&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">collections</span> <span class="p">=</span> <span class="n">configServer</span><span class="p">.</span><span class="n">CatalogNode</span><span class="p">.</span><span class="n">QueryChildren</span><span class="p">(</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Guid</span><span class="p">[]</span> <span class="p">{</span> <span class="n">CatalogResourceTypes</span><span class="p">.</span><span class="n">ProjectCollection</span> <span class="p">},</span> <span class="k">false</span><span class="p">,</span> <span class="n">CatalogQueryOptions</span><span class="p">.</span><span class="n">None</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">projects</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TeamProjectInfo</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">collectionNode</span> <span class="k">in</span> <span class="n">collections</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">collectionId</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Guid</span><span class="p">(</span><span class="n">collectionNode</span><span class="p">.</span><span class="n">Resource</span><span class="p">.</span><span class="n">Properties</span><span class="p">[</span><span class="s">&quot;InstanceId&quot;</span><span class="p">]);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">collection</span> <span class="p">=</span> <span class="n">configServer</span><span class="p">.</span><span class="n">GetTeamProjectCollection</span><span class="p">(</span><span class="n">collectionId</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">workItemStore</span> <span class="p">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">GetService</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WorkItemStore</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">Project</span> <span class="n">project</span> <span class="k">in</span> <span class="n">workItemStore</span><span class="p">.</span><span class="n">Projects</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="n">HasWorkItemReadRights</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">projectInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TeamProjectInfo</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">CollectionName</span> <span class="p">=</span> <span class="n">collectionName</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">CollectionId</span> <span class="p">=</span> <span class="n">collectionId</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">ProjectName</span> <span class="p">=</span> <span class="n">project</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">ProjectUri</span> <span class="p">=</span> <span class="n">project</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">WorkItemTypes</span> <span class="p">=</span> <span class="n">project</span><span class="p">.</span><span class="n">WorkItemTypes</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">Cast</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WorkItemType</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">wit</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">wit</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">name</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">ToList</span><span class="p">()</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="n">projects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">projectInfo</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">projects</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Retrieving a Work Items list</h3>

<p>When the app user selects a Team Project, we want to display a list of Work Items in the project. This is implemented in the <code>WorkItemsController</code> on the Web API proxy service. The <code>Get</code> method requires the <code>collectionId</code> and <code>projectName</code> parameters, and returns a page of 10 work items, in the form of a <code>WorkItemInfo</code> data transfer object. The optional <code>page</code> parameter allows retrieving a particular page of work items, and the optional <code>workItemType</code> parameter allows filtering by work item type (e.g. Bug, Requirement, Task, etc).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WorkItemsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[TfsBasicAuthentication]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">WorkItemsController</span> <span class="p">:</span> <span class="n">ApiController</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="c1">// GET api/workitems</span>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WorkItemInfo</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">collectionId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">projectName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">page</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="kt">string</span> <span class="n">workItemType</span> <span class="p">=</span> <span class="s">&quot;All&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">collectionId</span><span class="p">)</span> <span class="p">||</span> <span class="n">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">projectName</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">HttpResponseException</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">HttpResponseMessage</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">)</span> <span class="p">{</span> <span class="n">Content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringContent</span><span class="p">(</span><span class="s">&quot;collectionUri and projectName are required&quot;</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">configServer</span> <span class="p">=</span> <span class="p">(</span><span class="n">TfsConfigurationServer</span><span class="p">)</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Items</span><span class="p">[</span><span class="s">&quot;TFS_CONFIG_SERVER&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">collection</span> <span class="p">=</span> <span class="n">configServer</span><span class="p">.</span><span class="n">GetTeamProjectCollection</span><span class="p">(</span><span class="k">new</span> <span class="n">Guid</span><span class="p">(</span><span class="n">collectionId</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">workItemStore</span> <span class="p">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">GetService</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WorkItemStore</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">wiql</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Select * From WorkItems Where [System.TeamProject] = &#39;{0}&#39;&quot;</span><span class="p">,</span> <span class="n">projectName</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">workItemType</span><span class="p">)</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">!</span><span class="n">workItemType</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;All&quot;</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">wiql</span> <span class="p">+=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot; AND [System.WorkItemType] = &#39;{0}&#39;&quot;</span><span class="p">,</span> <span class="n">workItemType</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">workItemStore</span><span class="p">.</span><span class="n">Query</span><span class="p">(</span><span class="n">wiql</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">query</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Cast</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WorkItem</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Skip</span><span class="p">(</span><span class="m">10</span> <span class="p">*</span> <span class="n">page</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">WorkItemInfoBuilder</span><span class="p">.</span><span class="n">Build</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>WorkItemStore.Query</code> method returns a late-bound <code>IEnumerable</code> that allows the use of <code>Skip</code> and <code>Take</code> for efficient paging. The <code>WorkItemInfoBuilder</code> helper class takes care of mapping the TFS <code>WorkItem</code> class to the <code>WorkItemInfo</code> data transfer object.</p>

<h2>The Windows Store App</h2>

<p><img class="left" src="/images/split_app.png" title="Split App template" alt="Split App template"></p>

<p>Now that we have a proxy that makes the TFS API accessible from WinRT, it's time to get started on the Windows Store app. I began with the JavaScript Split App project template. This template provides a basic app frame and bootstrapper (default.html / default.js), navigation handler (navigator.js), data provider (data.js), and provides two screens for interaction: an "items" screen and a "split" screen. The data provider is set up to return static, hard-coded sample data.</p>

<p>The home screen of the app is the "items" screen, which would be more appropriately named "groups." The items screen presents a list of top-level item groups as horizontally-scrolling tiles. Selecting an item group tile navigates to the "split" screen that presents a list-detail view of the individual items within the selected group. The overall shape of this data and navigation scheme (groups containing items) meshes well with Team Projects containing lists of Work Items. I plan to break one more level out of the hierarchy: Team Projects are found within Team Project Collections (as seen above), so rather than the simple grid view on the main screen, I will use a grouped grid view with the team projects grouped by collection.</p>

<h3>Connection Preferences</h3>

<p>Before I can replace the sample data with live TFS data, I need to be able to provide the proxy with the URL of the TFS server. This is going to be a per-user setting, so I will add a settings command for displaying a flyout where the user can set the TFS URL. The user will invoke the Charms sidebar, and then click Settings to see my app's settings, which will include this custom command. Adding a settings command is accomplished by handling the <code>WinJS.Application.onsettings</code> event as seen here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Settings command  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">WinJS</span><span class="p">.</span><span class="n">Application</span><span class="p">.</span><span class="n">onsettings</span> <span class="p">=</span> <span class="n">function</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">e</span><span class="p">.</span><span class="n">detail</span><span class="p">.</span><span class="n">applicationcommands</span> <span class="p">=</span> <span class="p">{</span> <span class="s">&quot;connection&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="n">title</span><span class="p">:</span> <span class="s">&quot;Connection&quot;</span><span class="p">,</span> <span class="n">href</span><span class="p">:</span> <span class="s">&quot;/pages/preferences/preferences.html&quot;</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'><span class="n">WinJS</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">SettingsFlyout</span><span class="p">.</span><span class="n">populateSettings</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This adds a command to the settings flyout labeled "Connection" which will navigate to a flyout with the provided href. The markup for a flyout is simple - a top-level <code>div</code> inside the body for the flyout itself, with a back button and a label/input for the TFS URL.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Preferences.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.SettingsFlyout&quot;</span>
</span><span class='line'>     <span class="na">id=</span><span class="s">&quot;programmaticInvocationSettingsFlyout&quot;</span>
</span><span class='line'>     <span class="na">aria-label=</span><span class="s">&quot;App Settings Flyout&quot;</span>
</span><span class='line'>     <span class="na">data-win-options=</span><span class="s">&quot;{settingsCommandId:&#39;connection&#39;,width:&#39;narrow&#39;}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;win-ui-dark win-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;WinJS.UI.SettingsFlyout.show()&quot;</span> <span class="na">class=</span><span class="s">&quot;win-backbutton&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;win-label&quot;</span><span class="nt">&gt;</span>Preferences<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;win-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;win-settings-section&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h3&gt;</span>TFS Connection<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>Enter the address of your TFS Server. It must be publicly accessible on the internet for the TFS Work Items proxy service to access it. Usually this URL will end in /tfs.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;label&gt;</span>TFS URL<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;url&quot;</span> <span class="na">id=</span><span class="s">&quot;tfsUrl&quot;</span> <span class="na">aria-label=</span><span class="s">&quot;Enter TFS URL&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;https://account.visualstudio.com/tfs&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the JavaScript code-behind for the flyout, I added event listeners for <code>blur</code> and <code>keyup</code> on the <code>tfsUrl</code> input. The standard for Windows Store apps is for settings to take effect immediately, so when the user focuses away from the input or presses the Enter key, I will immediately store and react to the change.</p>

<h3>Getting the Team Projects list</h3>

<p>Now that the user has a way to specify the TFS URL, I can finally go fetch some live data. Windows Store apps are expected to launch as instantly as possible, so blocking while loading data at startup is not an option &mdash; control needs to be returned to the UI thread right away. In the <code>data.js</code> data provider, I will set up the <code>Data</code> namespace with an empty Team Projects list, then make an asynchronous call to fetch the Team Projects list from the proxy. The UI will bind to the team projects list so that once the asynchronous call returns and the list is filled, the UI binding will trigger it to be updated with the populated list.</p>

<p>Here you can see the definition of the Data namespace. Note that the <code>Windows.ApplicationModel.DesignMode.designModeEnabled</code> property is checked to determine if the code is being invoked in design mode. This is to allow the use of sample data when editing the views in Blend, but to fetch real data from the network when the app is actually running. When in design mode, <code>Data.dataService</code> is set to the static <code>SampleDataService</code> class; when not in design mode, <code>Data.dataService</code> is set to an instance of the <code>WebDataService</code> class. The call to <code>Data.loadProjects()</code> will return immediately to avoid blocking app startup, as you will see in the next code sample.</p>

<p><a id="data"></a>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Data.js initialization  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nx">projectList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WinJS</span><span class="p">.</span><span class="nx">Binding</span><span class="p">.</span><span class="nx">List</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">designMode</span> <span class="o">=</span> <span class="nx">Windows</span><span class="p">.</span><span class="nx">ApplicationModel</span><span class="p">.</span><span class="nx">DesignMode</span><span class="p">.</span><span class="nx">designModeEnabled</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">webDataService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebDataService</span><span class="p">(</span><span class="s2">&quot;https://tfsproxy.apphb.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">WinJS</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;Data&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">projects</span><span class="o">:</span> <span class="nx">projectList</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">groupedProjects</span><span class="o">:</span> <span class="nx">projectList</span><span class="p">.</span><span class="nx">createGrouped</span><span class="p">(</span><span class="nx">WebDataService</span><span class="p">.</span><span class="nx">getProjectGroupKey</span><span class="p">,</span> <span class="nx">WebDataService</span><span class="p">.</span><span class="nx">getProjectGroupData</span><span class="p">,</span> <span class="nx">WebDataService</span><span class="p">.</span><span class="nx">compareProjectGroups</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">dataService</span><span class="o">:</span> <span class="nx">designMode</span><span class="o">?</span> <span class="nx">SampleDataService</span> <span class="o">:</span> <span class="nx">webDataService</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">processingEvent</span><span class="o">:</span> <span class="s2">&quot;processingEvent&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">processingStatus</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">processingMessage</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">loadProjects</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">dataService</span><span class="p">.</span><span class="nx">getTeamProjects</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">projects</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">raiseProcessing</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">processingStatus</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">processingMessage</span> <span class="o">=</span> <span class="nx">message</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">WinJS</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">queueEvent</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">Data</span><span class="p">.</span><span class="nx">processingEvent</span><span class="p">,</span> <span class="nx">processing</span><span class="o">:</span> <span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Data</span><span class="p">.</span><span class="nx">loadProjects</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>WebDataService</code> class provides access to the proxy for retrieving Team Projects and Work Items. It leverages the <code>WinJS.xhr</code> method to make asynchronous HTTP requests to the proxy. Note that if the <code>Settings.tfsUrl</code> property is not set, no call to the service is made and the list remains empty.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WebDataService.getTeamProjects  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">getTeamProjects</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">list</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">.</span><span class="nx">beginEdits</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">list</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Settings</span><span class="p">.</span><span class="nx">tfsUrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Data</span><span class="p">.</span><span class="nx">processingMessage</span> <span class="o">=</span> <span class="s2">&quot;Please open the Settings charm, select Connection, and enter your TFS server URL.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Data</span><span class="p">.</span><span class="nx">raiseProcessing</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;Retrieving Team Projects list...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">WinJS</span><span class="p">.</span><span class="nx">xhr</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">apiBaseUrl</span> <span class="o">+</span> <span class="s2">&quot;/api/projects&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="nx">TfsUrl</span><span class="o">:</span> <span class="nx">Settings</span><span class="p">.</span><span class="nx">tfsUrl</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">done</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Data</span><span class="p">.</span><span class="nx">raiseProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">responseJson</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">project</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">project</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="nx">list</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">.</span><span class="nx">endEdits</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="right" src="/images/xhr_auth.png" title="WinJS.xhr authentication" alt="WinJS.xhr authentication"></p>

<p>The following sequence occurs when making the request to the proxy:</p>

<ul>
<li>WinJS.xhr makes the initial GET request to /api/projects with no authentication information</li>
<li>The custom Web API ActionFilter responds with HTTP 401 and the WWW-Authenticate header</li>
<li>WinRT recognizes the Basic auth negotiation, prompts for credentials, and retries the request</li>
<li>For the remainder of the app session, WinRT remembers the entered credentials and includes them in future requests to the same domain</li>
</ul>


<p>Once the request is successfully completed, the JSON response is parsed and the <code>TeamProjectInfo</code> records are pushed into the list, triggering a data-binding refresh.</p>

<h3>Displaying the Team Projects list</h3>

<p>Note in the <a href="#data">Data namespace</a> above, the <code>groupedProjects</code> property is provided. This is a grouped view of the Team Projects, with the Team Project Collection name used as the group key. In the items page, I made some modifications so that Team Projects would be displayed in groups by their collection. I also simplified the item template markup to simply display the Team Project name.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>items.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;itemtemplate&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.Binding.Template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;workitem-title&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: ProjectName&quot;</span><span class="nt">&gt;&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;itemspage fragment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">aria-label=</span><span class="s">&quot;Header content&quot;</span> <span class="na">role=</span><span class="s">&quot;banner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;win-backbutton&quot;</span> <span class="na">aria-label=</span><span class="s">&quot;Back&quot;</span> <span class="na">disabled</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;titlearea win-type-ellipsis&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;pagetitle&quot;</span><span class="nt">&gt;</span>TFS Work Items<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">aria-label=</span><span class="s">&quot;Main content&quot;</span> <span class="na">role=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span>
</span><span class='line'>            <span class="na">class=</span><span class="s">&quot;itemslist win-selectionstylefilled&quot;</span>
</span><span class='line'>            <span class="na">aria-label=</span><span class="s">&quot;List of groups&quot;</span>
</span><span class='line'>            <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.ListView&quot;</span>
</span><span class='line'>            <span class="na">data-win-options=</span><span class="s">&quot;{ selectionMode: &#39;none&#39;, layout: {type: WinJS.UI.GridLayout} }&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There is not much code at all in the codebehind for this page, simply setting up the data binding and hooking the <code>oniteminvoked</code> event to trigger navigation to the Work Item list for the selected item. Because the ListView layout type has been set to <code>WinJS.UI.GridLayout</code> in the markup, the items in the list are automatically displayed in groups when the <code>groupDataSource</code> of the ListView is set.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>items.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ui</span><span class="p">.</span><span class="nx">Pages</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;/pages/items/items.html&quot;</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">listView</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.itemslist&quot;</span><span class="p">).</span><span class="nx">winControl</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">itemDataSource</span> <span class="o">=</span> <span class="nx">Data</span><span class="p">.</span><span class="nx">groupedProjects</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">groupDataSource</span> <span class="o">=</span> <span class="nx">Data</span><span class="p">.</span><span class="nx">groupedProjects</span><span class="p">.</span><span class="nx">groups</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">itemTemplate</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.itemtemplate&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">oniteminvoked</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">project</span> <span class="o">=</span> <span class="nx">Data</span><span class="p">.</span><span class="nx">projects</span><span class="p">.</span><span class="nx">getAt</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">itemIndex</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">WinJS</span><span class="p">.</span><span class="nx">Navigation</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="s2">&quot;/pages/split/split.html&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">project</span><span class="o">:</span> <span class="nx">project</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_initializeLayout</span><span class="p">(</span><span class="nx">listView</span><span class="p">,</span> <span class="nx">Windows</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">ViewManagement</span><span class="p">.</span><span class="nx">ApplicationView</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So, putting it all together, here's what the app's home screen looks like:</p>

<p><img src="/images/items.png" title="Team Projects grouped display" alt="Team Projects grouped display"></p>

<h3>Getting and Displaying Work Items</h3>

<p>Selecting a Team Project on the items screen navigates to the split screen, with the <code>project</code> property of the options parameter set to the selected project. This is transformed by the framework into the arguments to the <code>ready</code> function of the split page. The split page has a lot more functionality than the items page -- it needs to support:</p>

<ul>
<li>Selection of a work item to display its details</li>
<li>Browsing to the next page of work items (a page of 10 at a time is returned by the proxy)</li>
<li>Browsing to the preview page of work items</li>
<li>Filtering the list of work items by type (e.g. Bug, Requirement, Task, etc.)</li>
</ul>


<p>The <code>ready</code> function takes care of binding the App Bar commands, filling the filtering select control with work item types, and initiating the fetch of Work Items from the proxy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ready in split.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">_project</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">project</span><span class="p">;</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">_itemSelectionIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="s2">&quot;selectedIndex&quot;</span> <span class="k">in</span> <span class="nx">options</span><span class="p">)</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">selectedIndex</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">element</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;header[role=banner] .pagetitle&quot;</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_project</span><span class="p">.</span><span class="nx">ProjectName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;cmdPrev&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_prevWorkItemPage</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;cmdNext&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_nextWorkItemPage</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;cmdFilter&quot;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">flyOut</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;filterFlyout&quot;</span><span class="p">).</span><span class="nx">winControl</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">flyOut</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&quot;top&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fill the work item type select with the available types and listen for selection</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">workItemTypeSelect</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;workItemTypeSelect&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">_project</span><span class="p">.</span><span class="nx">WorkItemTypes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">workItemType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">option</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">option</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">workItemType</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">option</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">workItemType</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">workItemTypeSelect</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">option</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">workItemTypeSelect</span><span class="p">.</span><span class="nx">onchange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_pageNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_itemSelectionIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_workItemTypeFilter</span> <span class="o">=</span> <span class="nx">currentValue</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;appbar&quot;</span><span class="p">).</span><span class="nx">winControl</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_getWorkItems</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">_getWorkItems</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>_getWorkItems</code> function is triggered when the view is first loaded, as well as when a different page or filter is requested. It passes the parameters for page number and work item type to the proxy, and then fills the data-bound work item list with the response. The work item list and detail sections are faded out while processing. Code in the <code>default.js</code> bootstrapper hooks to the <code>Data</code> namespace's processing event and shows an indeterminate progress bar and status message when the event is raised. By fading out the primary sections, we allow the progress bar to be easily seen.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><em>getWorkItems in split.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/em&gt;getWorkItems: function() {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fade list and workitem while loading</span>
</span><span class='line'><span class="nx">WinJS</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">fadeOut</span><span class="p">([[</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-detail-section&quot;</span><span class="p">)],</span> <span class="p">[</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-list-section&quot;</span><span class="p">)]]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">listView</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-list&quot;</span><span class="p">).</span><span class="nx">winControl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Data</span><span class="p">.</span><span class="nx">dataService</span><span class="p">.</span><span class="nx">getWorkItems</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_project</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_pageNumber</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_workItemTypeFilter</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">workItems</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_workItems</span> <span class="o">=</span> <span class="nx">workItems</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set up the work item ListView.</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">itemDataSource</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_workItems</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">itemTemplate</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-template&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">onselectionchanged</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_selectionChanged</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">self</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">listView</span><span class="p">.</span><span class="nx">layout</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">ListLayout</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_updateVisibility</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_isSingleColumn</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_itemSelectionIndex</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// for single-column detail view, load the article and change page title to Work Item title</span>
</span><span class='line'>            <span class="nx">self</span><span class="p">.</span><span class="nx">_loadArticleDetails</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">WinJS</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">fadeIn</span><span class="p">([[</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-detail-section&quot;</span><span class="p">)],</span> <span class="p">[</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-list-section&quot;</span><span class="p">)]]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">listView</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_itemSelectionIndex</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>        <span class="nx">WinJS</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">fadeIn</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.workitem-list-section&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the use of the <code>_isSingleColumn</code> utility function - depending on the orientation or snapped state of the app, the view may be filled with the article details - in that case, we immediately load the current article details after the work items are retrieved; when in full landscape view, we set the selection in the list view knowing that our <code>_selectionChanged</code> handler will be triggered for loading the article.</p>

<p><img src="/images/split.png" title="Work Items display" alt="Work Items display"></p>

<p>The markup for the split page provides formatting for the work item list and detail view. It is not heavily modified from the Split App template, although the item images have been removed and additional binding fields have been added for the most important Work Item properties. At the bottom of the display area, a ListView is used to display a generic list of field name-value pairs - this is because work item templates can be heavily customized, and it is not possible to anticipate the names of the fields a user could define.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>split.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Template for Work Item nav list --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-template&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.Binding.Template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-id&quot;</span><span class="nt">&gt;&lt;h2</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Id&quot;</span><span class="nt">&gt;&lt;/h2&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-info&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;workitem-title win-type-ellipsis&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: WorkItemType&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>: <span class="nt">&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Title&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;workitem-state win-type-ellipsis&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: State&quot;</span><span class="nt">&gt;&lt;/h4&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h6</span> <span class="na">class=</span><span class="s">&quot;workitem-assignedto win-type-ellipsis&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: AssignedTo&quot;</span><span class="nt">&gt;&lt;/h6&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Template for individual work item fields list --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field-template&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.Binding.Template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field-pair&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field-name win-type-ellipsis&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Name&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field-value win-type-ellipsis&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Value&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- The content that will be loaded and displayed. --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;splitpage fragment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">aria-label=</span><span class="s">&quot;Header content&quot;</span> <span class="na">role=</span><span class="s">&quot;banner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;win-backbutton&quot;</span> <span class="na">aria-label=</span><span class="s">&quot;Back&quot;</span> <span class="na">disabled</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;titlearea win-type-ellipsis&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;pagetitle&quot;</span><span class="nt">&gt;</span>Temp title<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-list-section&quot;</span> <span class="na">aria-label=</span><span class="s">&quot;List column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-list win-selectionstylefilled&quot;</span>
</span><span class='line'>             <span class="na">aria-label=</span><span class="s">&quot;List of this Team Project&#39;s Work Items&quot;</span>
</span><span class='line'>             <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.ListView&quot;</span>
</span><span class='line'>             <span class="na">data-win-options=</span><span class="s">&quot;{itemTemplate:select(&#39;.workitem-template&#39;), selectionMode:&#39;single&#39;, swipeBehavior:&#39;none&#39;, tapBehavior:&#39;toggleSelect&#39;}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&quot;workitem-detail-section&quot;</span> <span class="na">aria-atomic=</span><span class="s">&quot;true&quot;</span> <span class="na">aria-label=</span><span class="s">&quot;Work Item detail column&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;assertive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;header&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-id&quot;</span><span class="nt">&gt;&lt;h2</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Id&quot;</span><span class="nt">&gt;&lt;/h2&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-title&quot;</span><span class="nt">&gt;&lt;h2</span> <span class="na">class=</span><span class="s">&quot;win-type-ellipsis&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: WorkItemType&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>: <span class="nt">&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Title&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/h2&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header-left&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;workitem-subtitle&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: State&quot;</span><span class="nt">&gt;&lt;/span&gt;</span> (<span class="nt">&lt;span</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Reason&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>)<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h6</span> <span class="na">class=</span><span class="s">&quot;workitem-subtitle&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: AssignedTo&quot;</span><span class="nt">&gt;&lt;/h6&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;workitem-subtitle&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Area&quot;</span><span class="nt">&gt;&lt;/h4&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h6</span> <span class="na">class=</span><span class="s">&quot;workitem-subtitle&quot;</span> <span class="na">data-win-bind=</span><span class="s">&quot;textContent: Iteration&quot;</span><span class="nt">&gt;&lt;/h6&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-description&quot;</span><span class="nt">&gt;&lt;/div&gt;</span> <span class="c">&lt;!-- content is set in code due to need to convert to static HTML --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-history&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-otherfields&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;workitem-field-list&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.ListView&quot;</span> <span class="na">data-win-options=</span><span class="s">&quot;{selectionMode:&#39;none&#39;, swipeBehavior:&#39;none&#39;, tapBehavior:&#39;none&#39;}&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/article&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;appbar&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.AppBar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.AppBarCommand&quot;</span> <span class="na">data-win-options=</span><span class="s">&quot;{id:&#39;cmdPrev&#39;, label:&#39;Previous Page&#39;, icon:&#39;previous&#39;, section:&#39;selection&#39;}&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.AppBarCommand&quot;</span> <span class="na">data-win-options=</span><span class="s">&quot;{id:&#39;cmdNext&#39;, label:&#39;Next Page&#39;, icon:&#39;next&#39;, section:&#39;selection&#39;}&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.AppBarCommand&quot;</span> <span class="na">data-win-options=</span><span class="s">&quot;{id:&#39;cmdFilter&#39;, label:&#39;Filter&#39;, icon:&#39;filter&#39;, section:&#39;selection&#39;}&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;filterFlyout&quot;</span> <span class="na">data-win-control=</span><span class="s">&quot;WinJS.UI.Flyout&quot;</span> <span class="na">data-win-options=</span><span class="s">&quot;{anchor:&#39;cmdFilterButton&#39;}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;workItemTypeSelect&quot;</span><span class="nt">&gt;</span>Work Item Type<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;workItemTypeSelect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;All&quot;</span><span class="nt">&gt;</span>All<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>split.html</code> markup also provides the App Bar for the page (defining the page and filter commands) as well as the flyout that is displayed when the filter command is invoked. The flyout simply contains a <code>label</code> and <code>select</code> list that is populated (as seen above) with the work item types available in the current project.</p>

<h2>Wrapping Up</h2>

<p>So, there you have it - a (very simple) TFS Work Item browser. This was a great learning exercise: it pushed my JavaScript skills and was a nice tour of some of the common features of the platform. While I'm happy with the insights I've gained into WinRT and with this app as a sample, I think it could take a more dynamic approach to browsing and viewing work items. The work item detail display does not seem to me to conform to the Windows Store design guidelines. I would like to consult with some of my UX colleagues for ideas about how to present the work item details in a way that is natural to the platform.</p>

<h3>Future Plans</h3>

<p>Here are some other potential ways to extend the app in the future</p>

<ul>
<li>Work Item Queries: returning a list of work items sorted ascending by ID is not very useful - most TFS users access work items using pre-defined work item queries.</li>
<li>Content URIs: handle the vsts content URI for loading an individual work item.</li>
<li>Leverage the Work Item Type definition to determine (and possibly reflect the layout definition of) the important custom work item fields.</li>
<li>Display the Work Item details in a format more appropriate to a Windows Store app.</li>
<li>Search, Sharing, and Print contracts.</li>
<li>Allow simple modification actions, like assignment and state change; or, allow full editing.</li>
</ul>


<h3>Miscellaneous Tips</h3>

<p>I ran into some issues along the way that don't fit right in with the narrative above, but are worth sharing.</p>

<h4>Tip 1: Secure XHR against IIS</h4>

<p>Windows Store apps require all HTTPS server certificates to be trusted. I hit this message when attempting to use <code>WinJS.xhr</code> against my local IIS Express-hosted service:</p>

<p><code>SCRIPT7002: XMLHttpRequest: Network Error 0x800c0019, Security certificate required to access this resource is invalid.</code></p>

<p>I found a helpful <a href="http://robrich.org/archive/2012/06/04/Moving-to-IIS-Express-and-https.aspx">blog post</a> (see Step 7) that described how to install the IIS Express certificate in the local store so that it is trusted by the Windows Store app. In the deployed environment, this won't be an issue, since AppHarbor supplies an HTTPS certificate from an already-trusted authority.</p>

<h4>Tip 2: Fiddler with WinRT apps</h4>

<p>By default, WinRT security prevents Fiddler from intercepting network traffic from Windows Store apps. This <a href="http://blogs.msdn.com/b/fiddler/archive/2011/12/10/fiddler-windows-8-apps-enable-loopback-network-isolation-exemption.aspx">post</a> explained how to work around the issue.</p>

<h4>Tip 3: Dynamic content in InnerHTML</h4>

<p>The Description and History work item fields will often contain HTML content. WinRT will throw a security error if you attempt to set the <code>innerHTML</code> property of an element to a string with certain attributes set. This <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh849625.aspx">article</a> explains techniques for dealing with potentially dangerous content. The particular technique that I used was the <code>window.toStaticHTML</code> method for cleaning text before assigning it to an <code>innerHTML</code> property.</p>

<h4>Tip 4: Deploying to and Debugging on Surface</h4>

<p>To auto-deploy and test the app on my Microsoft Surface, directly from Visual Studio 2012, I followed the steps provided in this <a href="http://elybob.wordpress.com/2012/12/19/step-by-step-to-deploying-app-to-surface/">article</a>. My colleague Rocky Lhotka also has a good <a href="http://www.lhotka.net/weblog/TestingAWinRTAppOnASurfaceRT.aspx">article</a> about packaging an app with a PowerShell script to allow distributing an app package for short-term side-loaded testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get peer reviews for your website with Criticue]]></title>
    <link href="http://www.aidanjryan.com/blog/2013/01/07/get-peer-reviews-for-your-website-with-criticue/"/>
    <updated>2013-01-07T11:27:00-08:00</updated>
    <id>http://www.aidanjryan.com/blog/2013/01/07/get-peer-reviews-for-your-website-with-criticue</id>
    <content type="html"><![CDATA[<p>I encountered a very useful new website called <a href="http://criticue.com"><strong>Criticue</strong></a>. It's a way to get quick, unbiased feedback of your website. It is dead simple to get started, just enter your URL - no signup required.<!--more--> After that, provide at least one review of another site, and you'll shortly get a review of your own. I've submitted two sites and have gotten feedback within 12 hours each time. At any point, you can create a username and password and return later to re-read reviews you've received. You can also submit additional reviews of others' sites and get more feedback on your own site.</p>

<p>It's much easier to turn a critical eye on someone else's work. Looking at your own stuff, you'll always have the reasoning that led you to the current state in the back of your mind. You're seeing what you have imagined and envisioned, not only what actually exists. Web design is about communication - with your own stuff, you already know the information that the site attempts to communicate. Reviewing someone else's work is a great way to exercise critical muscles that you can then use on your own material.</p>

<p>So check out <a href="http://criticue.com">Criticue</a> -- it's win-win: get timely, unbiased feedback on your stuff and practice your own critical eye.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better checkin comments]]></title>
    <link href="http://www.aidanjryan.com/blog/2012/09/20/better-checkin-comments/"/>
    <updated>2012-09-20T09:39:00-07:00</updated>
    <id>http://www.aidanjryan.com/blog/2012/09/20/better-checkin-comments</id>
    <content type="html"><![CDATA[<p>Good source control checkin (commit) comments can be a major time-saver. It's important to remember that your checkin comments have a large audience and a long lifetime.<!--more--></p>

<p>I rely on email alerts to get a quick overview of the work accomplished by our offshore team overnight. I want to get a feel for the volume of work accomplished and to identify any risky changes that should be reviewed right away. Quality comments make the difference between a glance through subject lines versus opening diffs to understand the nature of the changes.</p>

<p>The other activity greatly affected by comment quality is browsing source control history to locate the origin of a change. When I see a long list of "updated," "fixed," "changes," I know I'm in for an arduous hunt.</p>

<h2>Terrible comments:</h2>

<ul>
<li>Updated</li>
<li>Changed</li>
<li>Fixed</li>
<li>Updates</li>
<li>Checkin</li>
</ul>


<p>Terrible comments don't explain anything at all. Obviously you updated, changed, or fixed something. And you <em>really</em> obviously checked in!</p>

<h2>Bad comments:</h2>

<ul>
<li>Updated MyClass</li>
<li>Fixed Bug 5598</li>
<li>Changes to authentication</li>
</ul>


<p>Bad commenters tend to explain where or why they made changes, but not both. The "how" is usually completely missing.</p>

<h2>Good comments:</h2>

<ul>
<li>Bug 5598 - locking to fix race condition on settings initialization in MyClass</li>
<li>User Story 3355 - implement Save in Widget class</li>
</ul>


<p>Good comments have two to three components:</p>

<ol>
<li>Why - The reason the change was made, e.g. the Bug or Story number.</li>
<li>Where - The location of the change, usually a class or module name.</li>
<li>How - Required for Bug fixes. Explain the way the change solves the Bug.</li>
</ol>

]]></content>
  </entry>
  
</feed>
